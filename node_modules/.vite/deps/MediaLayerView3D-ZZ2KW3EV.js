import {
  c as c2
} from "./chunk-6DBQVE2E.js";
import "./chunk-2LYE3T3U.js";
import {
  n as n2
} from "./chunk-GD75B7SP.js";
import {
  d
} from "./chunk-AGK2CKWJ.js";
import {
  i
} from "./chunk-3IKQDWZ7.js";
import "./chunk-S2L2EMCY.js";
import "./chunk-J3HE7QNA.js";
import {
  ne
} from "./chunk-AD4YIQAV.js";
import "./chunk-4DMQJ2S2.js";
import "./chunk-SFLHXPT4.js";
import "./chunk-ICIEEFA3.js";
import "./chunk-UTDRCXKP.js";
import "./chunk-HXNDA4EJ.js";
import "./chunk-ZFRKFGUZ.js";
import {
  E,
  I,
  a2 as a3,
  e as e3
} from "./chunk-V4MUDRER.js";
import {
  C
} from "./chunk-FUNFO42Y.js";
import "./chunk-FF3JARPY.js";
import "./chunk-UP7SW73R.js";
import "./chunk-VHOCNQAB.js";
import "./chunk-OK2X54ZK.js";
import "./chunk-RDB3JY7T.js";
import "./chunk-WO5DESPO.js";
import "./chunk-W5D3JTKS.js";
import "./chunk-JGNIGIZR.js";
import "./chunk-LUC7NVZB.js";
import "./chunk-XEG7QIWD.js";
import "./chunk-SME753HL.js";
import "./chunk-4QCFWJ22.js";
import "./chunk-KWPMDFFW.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-KFBN32GM.js";
import {
  b
} from "./chunk-ZPXPJ2G7.js";
import "./chunk-GXIJZVS6.js";
import "./chunk-6LC2JTLC.js";
import "./chunk-LYVSHBLV.js";
import {
  w
} from "./chunk-NZZXHYUD.js";
import "./chunk-VG7E4EAR.js";
import "./chunk-JI3FA4UR.js";
import "./chunk-HXPEPPWJ.js";
import "./chunk-A76FH7WO.js";
import "./chunk-3JWSWLNQ.js";
import "./chunk-MUDJ2KE7.js";
import "./chunk-EVSMDRIW.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-77DVCCTB.js";
import "./chunk-VVBWSIUG.js";
import "./chunk-TXZY5TKH.js";
import "./chunk-YMGFO2D7.js";
import "./chunk-FZT425TB.js";
import "./chunk-6AORBEIP.js";
import "./chunk-E4SXYCGV.js";
import "./chunk-CYWA6YJM.js";
import "./chunk-5DK7WWJE.js";
import "./chunk-M3ODSYZR.js";
import "./chunk-FB4A6PBH.js";
import "./chunk-UG4QYACC.js";
import "./chunk-GRRIWI4U.js";
import "./chunk-X5HNB5JI.js";
import "./chunk-K43XJEZQ.js";
import "./chunk-6JSGBXI6.js";
import "./chunk-KBPF5PFD.js";
import "./chunk-GXJIA6VA.js";
import "./chunk-L5ONWTZL.js";
import "./chunk-UI5O37MZ.js";
import "./chunk-XFZB3R5P.js";
import "./chunk-YRKEWWDW.js";
import "./chunk-KHQ5TXSL.js";
import "./chunk-NU4UASX6.js";
import "./chunk-LQIVAUXR.js";
import "./chunk-F4YTVHY4.js";
import "./chunk-4FXCMZ3U.js";
import "./chunk-SADO52IH.js";
import "./chunk-FOJITELY.js";
import "./chunk-NCXRF7LF.js";
import "./chunk-73PNWDTS.js";
import "./chunk-PKS3ZVLN.js";
import "./chunk-XMR2X5WG.js";
import "./chunk-KUPJ3HED.js";
import "./chunk-36L3RRF7.js";
import "./chunk-BUCIQGFS.js";
import "./chunk-OUYOFOVY.js";
import "./chunk-HVLYIZVQ.js";
import "./chunk-FDGDKKWR.js";
import "./chunk-25GSBURT.js";
import "./chunk-63ERNIOV.js";
import "./chunk-IWGINM6K.js";
import "./chunk-WUQZO2AO.js";
import "./chunk-IVCEO3SL.js";
import "./chunk-3RKFJO4O.js";
import "./chunk-P4NNXJS3.js";
import "./chunk-LZAQ3R3T.js";
import "./chunk-Y67AAEQ4.js";
import "./chunk-L2MGQ544.js";
import "./chunk-O2CT6XUA.js";
import "./chunk-DWF7HN4X.js";
import "./chunk-2ORXZKWN.js";
import "./chunk-KTGLOZE4.js";
import "./chunk-K6DV6EVZ.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-LWKRCHND.js";
import "./chunk-USOI6RP2.js";
import "./chunk-TLBJBU3X.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-MNDNZJD5.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-CUZNACFZ.js";
import "./chunk-ZHUFARKQ.js";
import "./chunk-IUCM3FNB.js";
import "./chunk-PCEMOYTZ.js";
import "./chunk-4RU6WIRN.js";
import "./chunk-3TMT4LDG.js";
import "./chunk-BDWD2ZNU.js";
import "./chunk-FF5LS3YE.js";
import {
  D
} from "./chunk-HLBPEADQ.js";
import "./chunk-FIBWCATC.js";
import "./chunk-NLWV7Q6F.js";
import {
  s
} from "./chunk-6S2FCH6S.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-7FNOSSSO.js";
import "./chunk-LLQMBVBO.js";
import "./chunk-OTNLRAEN.js";
import "./chunk-OKABUMQT.js";
import "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-WWUAHPIM.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-6NPJZOPM.js";
import "./chunk-GLVTFP5O.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-2TWR6EVF.js";
import "./chunk-4CZO65BK.js";
import "./chunk-ZEMUATMN.js";
import "./chunk-RG2YRACH.js";
import "./chunk-HE256ZWN.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-W3WHCGIQ.js";
import {
  a as a2
} from "./chunk-HPWZ2OON.js";
import "./chunk-CNS4YGGN.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-7JNPZC53.js";
import "./chunk-REPJV7SP.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import {
  c
} from "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import {
  y
} from "./chunk-453UIKKW.js";
import {
  a2 as a
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import {
  e as e2,
  n,
  o
} from "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import {
  T,
  k
} from "./chunk-UYRCWUYQ.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/views/3d/layers/MediaLayerView3D.js
var j = class extends n2(d) {
  constructor() {
    super(...arguments), this.type = "media-3d", this.drapeSourceType = e3.RasterImage, this.updatePolicy = C.ASYNC, this._uidToElement = /* @__PURE__ */ new Map(), this._renderedElements = /* @__PURE__ */ new Map(), this._lastDrapingExtent = null, this._update = k(async (e4, t, r) => {
      const i2 = await this._collectMediaElements(e4, t, r);
      this._synchronizeRenderElements(i2);
    }, 0);
  }
  initialize() {
    this._renderer = this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);
    const e4 = () => this._updateWithLastDrapingExtent();
    this.handles.add([e2(() => this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)), a2(() => this.layer.effectiveSource, "change", e4), a2(() => this.layer.effectiveSource, "refresh", e4)]), this.updatingHandles.add(() => this.suspended, e4);
  }
  setDrapingExtent(e4, t) {
    this._lastDrapingExtent = { overlays: e4, spatialReference: t }, this._updateWithLastDrapingExtent();
  }
  getHit(e4) {
    const t = this._uidToElement.get(e4);
    return t ? { type: "media", element: t, layer: this.layer } : null;
  }
  _updateWithLastDrapingExtent() {
    if (null == this._lastDrapingExtent || this.suspended)
      return void (this._renderer && this._synchronizeRenderElements(/* @__PURE__ */ new Set()));
    const { overlays: e4, spatialReference: t } = this._lastDrapingExtent;
    this.updatingHandles.addPromise(this._update(e4, t).catch(() => {
    }));
  }
  async _collectMediaElements(e4, t, r) {
    const i2 = this.layer.effectiveSource;
    return null == i2 ? /* @__PURE__ */ new Set() : new Set((await Promise.all(e4.map((e5) => i2.queryElements(c(e5.extent, t), { signal: r })))).flat());
  }
  _synchronizeRenderElements(e4) {
    this._synchronizeRenderElementsRemove(e4), this._synchronizeRenderElementsAdd(e4);
  }
  _synchronizeRenderElementsRemove(e4) {
    const t = /* @__PURE__ */ new Set(), r = [];
    this._renderedElements.forEach((i2, n3) => {
      e4.has(n3) || (t.add(n3), null != i2.renderData && r.push(i2.renderData.renderGeometry), this._removeElement(n3, i2));
    }), this._renderer.removeGeometries(r, E.REMOVE);
  }
  _synchronizeRenderElementsAdd(e4) {
    for (const t of e4)
      this._renderedElements.has(t) || this._createRenderElement(t);
  }
  _removeElement(e4, { renderData: t, handle: r }) {
    this._destroyRenderData(t), this._renderedElements.delete(e4), this._uidToElement.delete(e4.uid), r.remove();
  }
  async _createRenderElement(e4) {
    const t = new i({ spatialReference: this.view.spatialReference, element: e4 }), n3 = { renderData: null, handle: n([this.updatingHandles.add(() => e4.opacity, (e5) => {
      null != n3.renderData && n3.renderData.material.setParameters({ opacity: e5 });
    }), this.updatingHandles.add(() => t.coords, (e5) => {
      null != n3.renderData ? this._updateGeometry(n3, n3.renderData, e5) : this._initializeRenderData(t, n3);
    }), this.updatingHandles.add(() => e4.content, () => this._initializeRenderData(t, n3)), o(t)]) };
    this._renderedElements.set(e4, n3), this._uidToElement.set(e4.uid, e4), this.updatingHandles.addPromise(e4.load().catch(() => {
    })), this._initializeRenderData(t, n3);
  }
  _initializeRenderData(e4, t) {
    const { coords: r, element: i2 } = e4;
    if (null == r || null == i2.content)
      return void (t.renderData = this._destroyRenderData(t.renderData));
    if (null != t.renderData)
      return;
    const n3 = this._createTexture(i2.content);
    this.view._stage.add(n3);
    const a4 = this.view._stage.loadImmediate(n3);
    T(a4) && this.updatingHandles.addPromise(a4);
    const o2 = new c2({ initTextureTransparent: true, textureId: n3.id, opacity: i2.opacity, transparent: true }), d2 = this._positionVertexBufferFromCoordinates(r), l = [0, 0, 1, 0, 1, 1, 0, 1], m = [0, 1, 2, 0, 2, 3], p = new b(o2, [[O.POSITION, new s(d2, 3, true)], [O.UV0, new s(l, 2, true)]], [[O.POSITION, m], [O.UV0, m]]), h = new a3(p, { layerUid: this.layer.uid, graphicUid: i2.uid });
    this._renderer.addGeometries([h], E.ADD), t.renderData = { renderGeometry: h, texture: n3, material: o2 };
  }
  _updateGeometry(e4, t, r) {
    if (null == r)
      return void (e4.renderData = this._destroyRenderData(e4.renderData));
    const i2 = this._positionVertexBufferFromCoordinates(r);
    t.renderGeometry.geometry.setAttributeData(O.POSITION, i2), this._renderer.modifyGeometries([t.renderGeometry], I.GEOMETRY);
  }
  _positionVertexBufferFromCoordinates(e4) {
    const [t, r, i2, n3] = e4.rings[0];
    return [t[0], t[1], ne, n3[0], n3[1], ne, i2[0], i2[1], ne, r[0], r[1], ne];
  }
  _destroyRenderData(e4) {
    return null == e4 || (this.view._stage.remove(e4.texture), this._renderer.removeGeometries([e4.renderGeometry], E.REMOVE), e4.material.dispose()), null;
  }
  _createTexture(e4) {
    const t = e4 instanceof HTMLImageElement ? e4.naturalWidth : e4.width, r = e4 instanceof HTMLImageElement ? e4.naturalHeight : e4.height;
    return new w(e4, { wrap: { s: D.CLAMP_TO_EDGE, t: D.CLAMP_TO_EDGE }, preMultiplyAlpha: true, width: t, height: r, mipmap: true, updateCallback: () => this.view.basemapTerrain.overlayManager.setDrawTexturesDirty() });
  }
  get test() {
    const e4 = this;
    return { get numberOfElements() {
      return e4._renderedElements.size;
    } };
  }
};
e([y({ readOnly: true })], j.prototype, "type", void 0), e([y()], j.prototype, "layer", void 0), j = e([a("esri.views.3d.layers.MediaLayerView3D")], j);
var T2 = j;
export {
  T2 as default
};
//# sourceMappingURL=MediaLayerView3D-ZZ2KW3EV.js.map
