import {
  I2 as I
} from "./chunk-C4NVJBAG.js";
import "./chunk-PM77FW2O.js";
import "./chunk-AHKW4ZTY.js";
import {
  n,
  v2 as v,
  z
} from "./chunk-O2Q4W74O.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-PVUG2RDQ.js";
import "./chunk-J3HE7QNA.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-ICEO3WMK.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import {
  b
} from "./chunk-CF43FEIV.js";
import "./chunk-GNESNC4Q.js";
import "./chunk-VYG5A4VI.js";
import "./chunk-BFZI4PK4.js";
import "./chunk-EIQYIBNS.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-IR32DXLL.js";
import "./chunk-WIQR3T32.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-3ESTI2X4.js";
import "./chunk-YK2WEG7V.js";
import "./chunk-GVQH342Z.js";
import "./chunk-W3WHCGIQ.js";
import "./chunk-GWA3PLGA.js";
import "./chunk-CNS4YGGN.js";
import "./chunk-UHAU5IXU.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-GAARA5JM.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-F42HXUMI.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import {
  a
} from "./chunk-FXYPEAR7.js";
import {
  i
} from "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import "./chunk-453UIKKW.js";
import "./chunk-5BLDWPLW.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import "./chunk-UYRCWUYQ.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/views/2d/layers/features/support/whereUtils.js
var t = s.getLogger("esri.views.2d.layers.features.support.whereUtils");
var a2 = { getAttribute: (e, r) => e.field(r) };
async function s3(r, s4) {
  const n2 = await import("./WhereClause-EF75TIAS.js");
  try {
    const o = n2.WhereClause.create(r, s4);
    if (!o.isStandardized) {
      const r2 = new s2("mapview - bad input", "Unable to apply filter's definition expression, as expression is not standardized.", o);
      t.error(r2);
    }
    return (e) => {
      const r2 = e.readArcadeFeature();
      return o.testFeature(r2, a2);
    };
  } catch (o) {
    return t.warn("mapview-bad-where-clause", "Encountered an error when evaluating where clause", r), (e) => true;
  }
}

// node_modules/@arcgis/core/views/2d/layers/features/support/FeatureFilter.js
var d = 1;
var m = 2;
var _ = class {
  constructor(t2) {
    this._geometryBounds = i(), this._idToVisibility = /* @__PURE__ */ new Map(), this._serviceInfo = t2;
  }
  get hash() {
    return this._hash;
  }
  check(t2) {
    return this._applyFilter(t2);
  }
  clear() {
    const t2 = this._resetAllHiddenIds();
    return this.update(), { show: t2, hide: [] };
  }
  invalidate() {
    this._idToVisibility.forEach((t2, e) => {
      this._idToVisibility.set(e, 0);
    });
  }
  setKnownIds(t2) {
    for (const e of t2)
      this._idToVisibility.set(e, d);
  }
  setTrue(t2) {
    const e = [], i2 = [], s4 = new Set(t2);
    return this._idToVisibility.forEach((t3, r) => {
      const o = !!(this._idToVisibility.get(r) & d), h = s4.has(r);
      !o && h ? e.push(r) : o && !h && i2.push(r), this._idToVisibility.set(r, h ? d | m : 0);
    }), { show: e, hide: i2 };
  }
  createQuery() {
    const { geometry: t2, spatialRel: e, where: i2, timeExtent: s4, objectIds: r } = this;
    return b.fromJSON({ geometry: t2, spatialRel: e, where: i2, timeExtent: s4, objectIds: r });
  }
  async update(t2, e) {
    this._hash = JSON.stringify(t2);
    const i2 = await z(t2, null, e);
    await Promise.all([this._setGeometryFilter(i2), this._setIdFilter(i2), this._setAttributeFilter(i2), this._setTimeFilter(i2)]);
  }
  async _setAttributeFilter(t2) {
    if (!t2 || !t2.where)
      return this._clause = null, void (this.where = null);
    this._clause = await s3(t2.where, this._serviceInfo.fieldsIndex), this.where = t2.where;
  }
  _setIdFilter(t2) {
    this._idsToShow = t2 && t2.objectIds && new Set(t2.objectIds), this._idsToHide = t2 && t2.hiddenIds && new Set(t2.hiddenIds), this.objectIds = t2 && t2.objectIds;
  }
  async _setGeometryFilter(t2) {
    if (!t2 || !t2.geometry)
      return this._spatialQueryOperator = null, this.geometry = null, void (this.spatialRel = null);
    const e = t2.geometry, i2 = t2.spatialRel || "esriSpatialRelIntersects", o = await v(i2, e, this._serviceInfo.geometryType, this._serviceInfo.hasZ, this._serviceInfo.hasM);
    a(this._geometryBounds, e), this._spatialQueryOperator = o, this.geometry = e, this.spatialRel = i2;
  }
  _setTimeFilter(i2) {
    if (this.timeExtent = this._timeOperator = null, i2 && i2.timeExtent)
      if (this._serviceInfo.timeInfo)
        this.timeExtent = i2.timeExtent, this._timeOperator = n(this._serviceInfo.timeInfo, i2.timeExtent, I);
      else {
        const s4 = new s2("feature-layer-view:time-filter-not-available", "Unable to apply time filter, as layer doesn't have time metadata.", i2.timeExtent);
        s.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(s4);
      }
  }
  _applyFilter(t2) {
    return this._filterByGeometry(t2) && this._filterById(t2) && this._filterByTime(t2) && this._filterByExpression(t2);
  }
  _filterByExpression(t2) {
    return !this.where || this._clause(t2);
  }
  _filterById(t2) {
    return (!this._idsToHide || !this._idsToHide.size || !this._idsToHide.has(t2.getObjectId())) && (!this._idsToShow || !this._idsToShow.size || this._idsToShow.has(t2.getObjectId()));
  }
  _filterByGeometry(t2) {
    if (!this.geometry)
      return true;
    const e = t2.readHydratedGeometry();
    return !!e && this._spatialQueryOperator(e);
  }
  _filterByTime(t2) {
    return null == this._timeOperator || this._timeOperator(t2);
  }
  _resetAllHiddenIds() {
    const t2 = [];
    return this._idToVisibility.forEach((e, i2) => {
      e & d || (this._idToVisibility.set(i2, d), t2.push(i2));
    }), t2;
  }
};
export {
  _ as default
};
//# sourceMappingURL=FeatureFilter-RWRVAARL.js.map
