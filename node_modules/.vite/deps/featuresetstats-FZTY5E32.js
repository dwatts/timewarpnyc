import {
  l
} from "./chunk-6AXRLQ5N.js";
import {
  f
} from "./chunk-LFQ3TKCC.js";
import {
  L,
  Q,
  V,
  q,
  v,
  z
} from "./chunk-FCJ5IYMQ.js";
import "./chunk-YAWND7HF.js";
import "./chunk-HQEF5G5V.js";
import {
  e,
  t
} from "./chunk-FJYIB7HF.js";
import "./chunk-WIQR3T32.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-F42HXUMI.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import "./chunk-453UIKKW.js";
import "./chunk-5BLDWPLW.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import "./chunk-UYRCWUYQ.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstats.js
async function f2(n, t2, r, i, f3, d2) {
  if (1 === i.length) {
    if (z(i[0]))
      return l(n, i[0], v(i[1], -1));
    if (q(i[0]))
      return l(n, i[0].toArray(), v(i[1], -1));
  } else if (2 === i.length) {
    if (z(i[0]))
      return l(n, i[0], v(i[1], -1));
    if (q(i[0]))
      return l(n, i[0].toArray(), v(i[1], -1));
    if (V(i[0])) {
      const r2 = await i[0].load(), e2 = await l2(f.create(i[1], r2.getFieldsIndex()), d2, f3);
      return i[0].calculateStatistic(n, e2, v(i[2], 1e3), t2.abortSignal);
    }
  } else if (3 === i.length && V(i[0])) {
    const r2 = await i[0].load(), e2 = await l2(f.create(i[1], r2.getFieldsIndex()), d2, f3);
    return i[0].calculateStatistic(n, e2, v(i[2], 1e3), t2.abortSignal);
  }
  return l(n, i, -1);
}
async function l2(n, t2, r) {
  const e2 = n.getVariables();
  if (e2.length > 0) {
    const a = [];
    for (let n2 = 0; n2 < e2.length; n2++) {
      const i2 = { name: e2[n2] };
      a.push(await t2.evaluateIdentifier(r, i2));
    }
    const i = {};
    for (let n2 = 0; n2 < e2.length; n2++)
      i[e2[n2]] = a[n2];
    return n.parameters = i, n;
  }
  return n;
}
function d(c) {
  "async" === c.mode && (c.functions.stdev = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("stdev", t3, r, e2, n, c));
  }, c.functions.variance = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("variance", t3, r, e2, n, c));
  }, c.functions.average = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("mean", t3, r, e2, n, c));
  }, c.functions.mean = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("mean", t3, r, e2, n, c));
  }, c.functions.sum = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("sum", t3, r, e2, n, c));
  }, c.functions.min = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("min", t3, r, e2, n, c));
  }, c.functions.max = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("max", t3, r, e2, n, c));
  }, c.functions.count = function(o, u) {
    return c.standardFunctionAsync(o, u, (c2, f3, l3) => {
      if (Q(l3, 1, 1, o, u), V(l3[0]))
        return l3[0].count(c2.abortSignal);
      if (z(l3[0]) || L(l3[0]))
        return l3[0].length;
      if (q(l3[0]))
        return l3[0].length();
      throw new t(o, e.InvalidParameter, u);
    });
  });
}
export {
  d as registerFunctions
};
//# sourceMappingURL=featuresetstats-FZTY5E32.js.map
