import "./chunk-SJSAYHBJ.js";
import "./chunk-WXSXHXM4.js";
import "./chunk-PYQNXC2L.js";
import "./chunk-NHHKW3WR.js";
import "./chunk-V4EIGIRT.js";
import "./chunk-VYG5A4VI.js";
import "./chunk-ANW6V73Y.js";
import "./chunk-FJ3XUIT3.js";
import "./chunk-BFZI4PK4.js";
import {
  j as j3
} from "./chunk-QO446QEK.js";
import "./chunk-4FZRA4VI.js";
import {
  c
} from "./chunk-G32FVJ4L.js";
import {
  O
} from "./chunk-XJXVKVA7.js";
import {
  f as f3
} from "./chunk-HVAOWOGC.js";
import "./chunk-2NTQWEQZ.js";
import "./chunk-QZ6WR57P.js";
import "./chunk-E2PV5YTZ.js";
import "./chunk-GLVTFP5O.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import {
  p
} from "./chunk-MIHY6FSC.js";
import "./chunk-IR32DXLL.js";
import "./chunk-7BMUKKBX.js";
import "./chunk-WIQR3T32.js";
import "./chunk-C2EHS6UI.js";
import {
  n as n3
} from "./chunk-4VPM7SQA.js";
import "./chunk-DKJBDKGA.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DR3XNW4L.js";
import "./chunk-DKCDRJ5N.js";
import "./chunk-PCTUO7WS.js";
import {
  a as a4
} from "./chunk-BS4MX2AF.js";
import {
  t
} from "./chunk-R47DHBCM.js";
import "./chunk-KGA7WAD3.js";
import "./chunk-ZUBHLDU6.js";
import "./chunk-C3PCK5WU.js";
import "./chunk-HE256ZWN.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-OZXJDVTE.js";
import {
  b
} from "./chunk-PZXYASUU.js";
import "./chunk-W3WHCGIQ.js";
import {
  U,
  a as a3,
  j,
  l
} from "./chunk-HPWZ2OON.js";
import "./chunk-WAPUHORU.js";
import "./chunk-HXDFHMRK.js";
import "./chunk-5HSVWQOA.js";
import "./chunk-C2BBLDPU.js";
import "./chunk-GWA3PLGA.js";
import "./chunk-FXWSVUF2.js";
import {
  B,
  C,
  i,
  o as o2
} from "./chunk-CNS4YGGN.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-UHAU5IXU.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-CEXY22SC.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7JNPZC53.js";
import "./chunk-ZXXKE5XP.js";
import "./chunk-MATER45R.js";
import "./chunk-6UW2VZVV.js";
import {
  V
} from "./chunk-GAARA5JM.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-F42HXUMI.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-UNJDKTFU.js";
import {
  _
} from "./chunk-DH42JQZX.js";
import "./chunk-674HAVOZ.js";
import "./chunk-MHGDFNBE.js";
import {
  n
} from "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-JZM5YUHA.js";
import {
  j as j2
} from "./chunk-ZF5PVI2P.js";
import {
  n as n2
} from "./chunk-EQK73KLU.js";
import {
  Ct,
  kt
} from "./chunk-OBGBLQQX.js";
import {
  m
} from "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import {
  M
} from "./chunk-T35GN7EL.js";
import {
  f as f2
} from "./chunk-7U6V6KY2.js";
import {
  o,
  r
} from "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import {
  u2
} from "./chunk-CHTUPHTO.js";
import {
  y
} from "./chunk-453UIKKW.js";
import {
  a2
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  d
} from "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import {
  f2 as f
} from "./chunk-UYRCWUYQ.js";
import {
  s
} from "./chunk-HMVAPW5X.js";
import {
  a,
  u
} from "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/layers/support/kmlUtils.js
var c2 = { esriGeometryPoint: "points", esriGeometryPolyline: "polylines", esriGeometryPolygon: "polygons" };
function d3(e2) {
  const o3 = e2.folders || [], t3 = o3.slice(), r2 = /* @__PURE__ */ new Map(), n4 = /* @__PURE__ */ new Map(), i2 = /* @__PURE__ */ new Map(), f4 = /* @__PURE__ */ new Map(), a5 = /* @__PURE__ */ new Map(), l2 = { esriGeometryPoint: n4, esriGeometryPolyline: i2, esriGeometryPolygon: f4 };
  (e2.featureCollection && e2.featureCollection.layers || []).forEach((e3) => {
    const o4 = a(e3);
    o4.featureSet.features = [];
    const t4 = e3.featureSet.geometryType;
    r2.set(t4, o4);
    const a6 = e3.layerDefinition.objectIdField;
    "esriGeometryPoint" === t4 ? G(n4, a6, e3.featureSet.features) : "esriGeometryPolyline" === t4 ? G(i2, a6, e3.featureSet.features) : "esriGeometryPolygon" === t4 && G(f4, a6, e3.featureSet.features);
  }), e2.groundOverlays && e2.groundOverlays.forEach((e3) => {
    a5.set(e3.id, e3);
  }), o3.forEach((o4) => {
    o4.networkLinkIds.forEach((r3) => {
      const s2 = P(r3, o4.id, e2.networkLinks);
      s2 && t3.push(s2);
    });
  }), t3.forEach((e3) => {
    var _a;
    if (e3.featureInfos) {
      e3.points = a(r2.get("esriGeometryPoint")), e3.polylines = a(r2.get("esriGeometryPolyline")), e3.polygons = a(r2.get("esriGeometryPolygon")), e3.mapImages = [];
      for (const o4 of e3.featureInfos)
        switch (o4.type) {
          case "esriGeometryPoint":
          case "esriGeometryPolyline":
          case "esriGeometryPolygon": {
            const t4 = l2[o4.type].get(o4.id);
            t4 && ((_a = e3[c2[o4.type]]) == null ? void 0 : _a.featureSet.features.push(t4));
            break;
          }
          case "GroundOverlay": {
            const t4 = a5.get(o4.id);
            t4 && e3.mapImages.push(t4);
            break;
          }
        }
      e3.fullExtent = j4([e3]);
    }
  });
  const u3 = j4(t3);
  return { folders: o3, sublayers: t3, extent: u3 };
}
function g(t3, s2, i2, f4) {
  const a5 = n2 && n2.findCredential(t3);
  t3 = kt(t3, { token: a5 && a5.token });
  const l2 = s.kmlServiceUrl;
  return j2(l2, { query: { url: t3, model: "simple", folders: "", refresh: 0 !== i2 || void 0, outSR: JSON.stringify(s2) }, responseType: "json", signal: f4 });
}
function S(e2, o3, t3 = null, r2 = []) {
  const s2 = [], n4 = {}, i2 = o3.sublayers, f4 = o3.folders.map((e3) => e3.id);
  return i2.forEach((o4) => {
    var _a;
    const i3 = new e2();
    if (t3 ? i3.read(o4, t3) : i3.read(o4), r2.length && f4.includes(i3.id) && (i3.visible = r2.includes(i3.id)), n4[o4.id] = i3, null != o4.parentFolderId && -1 !== o4.parentFolderId) {
      const e3 = n4[o4.parentFolderId];
      e3.sublayers || (e3.sublayers = []), (_a = e3.sublayers) == null ? void 0 : _a.unshift(i3);
    } else
      s2.unshift(i3);
  }), s2;
}
function G(e2, o3, t3) {
  t3.forEach((t4) => {
    e2.set(t4.attributes[o3], t4);
  });
}
function h(e2, o3) {
  let t3;
  return o3.some((o4) => o4.id === e2 && (t3 = o4, true)), t3;
}
function P(e2, o3, t3) {
  const r2 = h(e2, t3);
  return r2 && (r2.parentFolderId = o3, r2.networkLink = r2), r2;
}
function j4(e2) {
  const o3 = i(C), t3 = i(C);
  for (const r2 of e2) {
    if (r2.polygons && r2.polygons.featureSet && r2.polygons.featureSet.features)
      for (const e3 of r2.polygons.featureSet.features)
        m(o3, e3.geometry), o2(t3, o3);
    if (r2.polylines && r2.polylines.featureSet && r2.polylines.featureSet.features)
      for (const e3 of r2.polylines.featureSet.features)
        m(o3, e3.geometry), o2(t3, o3);
    if (r2.points && r2.points.featureSet && r2.points.featureSet.features)
      for (const e3 of r2.points.featureSet.features)
        m(o3, e3.geometry), o2(t3, o3);
    if (r2.mapImages)
      for (const e3 of r2.mapImages)
        m(o3, e3.extent), o2(t3, o3);
  }
  return B(t3, C) ? void 0 : { xmin: t3[0], ymin: t3[1], zmin: t3[2], xmax: t3[3], ymax: t3[4], zmax: t3[5], spatialReference: f2.WGS84 };
}

// node_modules/@arcgis/core/layers/support/KMLSublayer.js
var j5;
var S2 = j5 = class extends n.EventedMixin(u2(_)) {
  constructor(...e2) {
    super(...e2), this.description = null, this.fullExtent = null, this.id = null, this.networkLink = null, this.parent = null, this.sublayers = null, this.title = null, this.sourceJSON = null, this.layer = null, this.addHandles([a3(() => this.sublayers, "after-add", ({ item: e3 }) => {
      e3.parent = this, e3.layer = this.layer;
    }, U), a3(() => this.sublayers, "after-remove", ({ item: e3 }) => {
      e3.layer = e3.parent = null;
    }, U), l(() => this.sublayers, (e3, t3) => {
      if (t3)
        for (const r2 of t3)
          r2.layer = r2.parent = null;
      if (e3)
        for (const r2 of e3)
          r2.parent = this, r2.layer = this.layer;
    }, U), l(() => this.layer, (e3) => {
      if (this.sublayers)
        for (const t3 of this.sublayers)
          t3.layer = e3;
    }, U)]);
  }
  initialize() {
    j(() => this.networkLink).then(() => j(() => true === this.visible)).then(() => this.load());
  }
  load(e2) {
    var _a;
    if (!this.networkLink)
      return;
    if (this.networkLink.viewFormat)
      return;
    const r2 = null != e2 ? e2.signal : null, s2 = this._fetchService(((_a = this._get("networkLink")) == null ? void 0 : _a.href) ?? "", r2).then((e3) => {
      var _a2;
      const r3 = j4(e3.sublayers);
      this.fullExtent = M.fromJSON(r3), this.sourceJSON = e3;
      const s3 = d(V.ofType(j5), S(j5, e3));
      this.sublayers ? this.sublayers.addMany(s3) : this.sublayers = s3, (_a2 = this.layer) == null ? void 0 : _a2.emit("sublayer-update"), this.layer && this.layer.notifyChange("visibleSublayers");
    });
    return this.addResolvingPromise(s2), Promise.resolve(this);
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e2) {
    this._get("visible") !== e2 && (this._set("visible", e2), this.layer && this.layer.notifyChange("visibleSublayers"));
  }
  readVisible(e2, t3) {
    return !!t3.visibility;
  }
  _fetchService(e2, t3) {
    return g(e2, this.layer.outSpatialReference, this.layer.refreshInterval, t3).then((e3) => d3(e3.data));
  }
};
e([y()], S2.prototype, "description", void 0), e([y({ type: M })], S2.prototype, "fullExtent", void 0), e([y()], S2.prototype, "id", void 0), e([y({ readOnly: true, value: null })], S2.prototype, "networkLink", void 0), e([y({ json: { write: { allowNull: true } } })], S2.prototype, "parent", void 0), e([y({ type: V.ofType(j5), json: { write: { allowNull: true } } })], S2.prototype, "sublayers", void 0), e([y({ value: null, json: { read: { source: "name", reader: (e2) => u(e2) } } })], S2.prototype, "title", void 0), e([y({ value: true })], S2.prototype, "visible", null), e([o("visible", ["visibility"])], S2.prototype, "readVisible", null), e([y()], S2.prototype, "sourceJSON", void 0), e([y()], S2.prototype, "layer", void 0), S2 = j5 = e([a2("esri.layers.support.KMLSublayer")], S2);
var k2 = S2;

// node_modules/@arcgis/core/layers/KMLLayer.js
var w = ["kml", "xml"];
var F = class extends a4(p(t(c(j3(O(b)))))) {
  constructor(...e2) {
    super(...e2), this._visibleFolders = [], this.allSublayers = new n3({ getCollections: () => [this.sublayers], getChildrenFunction: (e3) => e3.sublayers }), this.outSpatialReference = f2.WGS84, this.path = null, this.legendEnabled = false, this.operationalLayerType = "KML", this.sublayers = null, this.type = "kml", this.url = null;
  }
  initialize() {
    this.addHandles([l(() => this.sublayers, (e2, r2) => {
      r2 && r2.forEach((e3) => {
        e3.parent = null, e3.layer = null;
      }), e2 && e2.forEach((e3) => {
        e3.parent = this, e3.layer = this;
      });
    }, U), this.on("sublayer-update", () => this.notifyChange("fullExtent"))]);
  }
  normalizeCtorArgs(e2, r2) {
    return "string" == typeof e2 ? { url: e2, ...r2 } : e2;
  }
  readSublayersFromItemOrWebMap(e2, r2) {
    this._visibleFolders = r2.visibleFolders;
  }
  readSublayers(e2, r2, t3) {
    return S(k2, r2, t3, this._visibleFolders);
  }
  writeSublayers(e2, r2) {
    const t3 = [], o3 = e2.toArray();
    for (; o3.length; ) {
      const e3 = o3[0];
      e3.networkLink || (e3.visible && t3.push(e3.id), e3.sublayers && o3.push(...e3.sublayers.toArray())), o3.shift();
    }
    r2.visibleFolders = t3;
  }
  get title() {
    const e2 = this._get("title");
    return e2 && "defaults" !== this.originOf("title") ? e2 : this.url ? Ct(this.url, w) || "KML" : e2 || "";
  }
  set title(e2) {
    this._set("title", e2);
  }
  get visibleSublayers() {
    const e2 = this.sublayers, r2 = [], t3 = (e3) => {
      e3.visible && (r2.push(e3), e3.sublayers && e3.sublayers.forEach(t3));
    };
    return e2 && e2.forEach(t3), r2;
  }
  get fullExtent() {
    return this._recomputeFullExtent();
  }
  load(e2) {
    const r2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["KML"], supportsData: false }, e2).catch(f).then(() => this._fetchService(r2))), Promise.resolve(this);
  }
  destroy() {
    super.destroy(), this.allSublayers.destroy();
  }
  async _fetchService(e2) {
    const r2 = await Promise.resolve().then(() => this.resourceInfo ? { ssl: false, data: this.resourceInfo } : g(this.url ?? "", this.outSpatialReference, this.refreshInterval, e2)), t3 = d3(r2.data);
    t3 && this.read(t3, { origin: "service" });
  }
  _recomputeFullExtent() {
    let e2 = null;
    null != this.extent && (e2 = this.extent.clone());
    const r2 = (t3) => {
      if (t3.sublayers)
        for (const o3 of t3.sublayers.items)
          r2(o3), o3.visible && o3.fullExtent && (null != e2 ? e2.union(o3.fullExtent) : e2 = o3.fullExtent.clone());
    };
    return r2(this), e2;
  }
};
e([y({ readOnly: true })], F.prototype, "allSublayers", void 0), e([y({ type: f2 })], F.prototype, "outSpatialReference", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], F.prototype, "path", void 0), e([y({ readOnly: true, json: { read: false, write: false } })], F.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide", "hide-children"] })], F.prototype, "listMode", void 0), e([y({ type: ["KML"] })], F.prototype, "operationalLayerType", void 0), e([y({})], F.prototype, "resourceInfo", void 0), e([y({ type: V.ofType(k2), json: { write: { ignoreOrigin: true } } })], F.prototype, "sublayers", void 0), e([o(["web-map", "portal-item"], "sublayers", ["visibleFolders"])], F.prototype, "readSublayersFromItemOrWebMap", null), e([o("service", "sublayers", ["sublayers"])], F.prototype, "readSublayers", null), e([r("sublayers")], F.prototype, "writeSublayers", null), e([y({ readOnly: true, json: { read: false } })], F.prototype, "type", void 0), e([y({ json: { origins: { "web-map": { read: { source: "title" } } }, write: { ignoreOrigin: true } } })], F.prototype, "title", null), e([y(f3)], F.prototype, "url", void 0), e([y({ readOnly: true })], F.prototype, "visibleSublayers", null), e([y({ type: M })], F.prototype, "extent", void 0), e([y()], F.prototype, "fullExtent", null), F = e([a2("esri.layers.KMLLayer")], F);
var O2 = F;
export {
  O2 as default
};
//# sourceMappingURL=KMLLayer-RJORMT4I.js.map
