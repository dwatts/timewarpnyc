import {
  a
} from "./chunk-YRKEWWDW.js";
import {
  a as a2
} from "./chunk-K6DV6EVZ.js";
import {
  n
} from "./chunk-JP7O2ZWE.js";
import {
  E,
  N,
  S,
  T
} from "./chunk-HLBPEADQ.js";
import {
  l
} from "./chunk-3JQ6N63Z.js";
import {
  t
} from "./chunk-UYRCWUYQ.js";

// node_modules/@arcgis/core/views/webgl/renderState.js
function s(t3, e2, i2 = T.ADD, s2 = [0, 0, 0, 0]) {
  return { srcRgb: t3, srcAlpha: t3, dstRgb: e2, dstAlpha: e2, opRgb: i2, opAlpha: i2, color: { r: s2[0], g: s2[1], b: s2[2], a: s2[3] } };
}
function l2(t3, e2, i2, s2, l3 = T.ADD, r2 = T.ADD, o2 = [0, 0, 0, 0]) {
  return { srcRgb: t3, srcAlpha: e2, dstRgb: i2, dstAlpha: s2, opRgb: l3, opAlpha: r2, color: { r: o2[0], g: o2[1], b: o2[2], a: o2[3] } };
}
var r = { face: N.BACK, mode: S.CCW };
var o = { face: N.FRONT, mode: S.CCW };
var h = (e2) => e2 === n.Back ? r : e2 === n.Front ? o : null;
var a3 = { zNear: 0, zFar: 1 };
var _ = { r: true, g: true, b: true, a: true };
function c(t3) {
  return T2.intern(t3);
}
function d(t3) {
  return D.intern(t3);
}
function p(t3) {
  return C.intern(t3);
}
function u(t3) {
  return A.intern(t3);
}
function g(t3) {
  return w.intern(t3);
}
function f(t3) {
  return B.intern(t3);
}
function v(t3) {
  return z.intern(t3);
}
function I(t3) {
  return j.intern(t3);
}
function W(t3) {
  return N2.intern(t3);
}
var S2 = class {
  constructor(t3, e2) {
    this._makeKey = t3, this._makeRef = e2, this._interns = /* @__PURE__ */ new Map();
  }
  intern(t3) {
    if (!t3)
      return null;
    const e2 = this._makeKey(t3), i2 = this._interns;
    return i2.has(e2) || i2.set(e2, this._makeRef(t3)), i2.get(e2) ?? null;
  }
};
function b(t3) {
  return "[" + t3.join(",") + "]";
}
var T2 = new S2(y, (t3) => ({ __tag: "Blending", ...t3 }));
function y(t3) {
  return t3 ? b([t3.srcRgb, t3.srcAlpha, t3.dstRgb, t3.dstAlpha, t3.opRgb, t3.opAlpha, t3.color.r, t3.color.g, t3.color.b, t3.color.a]) : null;
}
var D = new S2(O, (t3) => ({ __tag: "Culling", ...t3 }));
function O(t3) {
  return t3 ? b([t3.face, t3.mode]) : null;
}
var C = new S2(m, (t3) => ({ __tag: "PolygonOffset", ...t3 }));
function m(t3) {
  return t3 ? b([t3.factor, t3.units]) : null;
}
var A = new S2(R, (t3) => ({ __tag: "DepthTest", ...t3 }));
function R(t3) {
  return t3 ? b([t3.func]) : null;
}
var w = new S2(k, (t3) => ({ __tag: "StencilTest", ...t3 }));
function k(t3) {
  return t3 ? b([t3.function.func, t3.function.ref, t3.function.mask, t3.operation.fail, t3.operation.zFail, t3.operation.zPass]) : null;
}
var B = new S2(P, (t3) => ({ __tag: "DepthWrite", ...t3 }));
function P(t3) {
  return t3 ? b([t3.zNear, t3.zFar]) : null;
}
var z = new S2(F, (t3) => ({ __tag: "ColorWrite", ...t3 }));
function F(t3) {
  return t3 ? b([t3.r, t3.g, t3.b, t3.a]) : null;
}
var j = new S2(K, (t3) => ({ __tag: "StencilWrite", ...t3 }));
function K(t3) {
  return t3 ? b([t3.mask]) : null;
}
var N2 = new S2(x, (t3) => ({ blending: c(t3.blending), culling: d(t3.culling), polygonOffset: p(t3.polygonOffset), depthTest: u(t3.depthTest), stencilTest: g(t3.stencilTest), depthWrite: f(t3.depthWrite), colorWrite: v(t3.colorWrite), stencilWrite: I(t3.stencilWrite) }));
function x(t3) {
  return t3 ? b([y(t3.blending), O(t3.culling), m(t3.polygonOffset), R(t3.depthTest), k(t3.stencilTest), P(t3.depthWrite), F(t3.colorWrite), K(t3.stencilWrite)]) : null;
}
var M = class {
  constructor(t3) {
    this._pipelineInvalid = true, this._blendingInvalid = true, this._cullingInvalid = true, this._polygonOffsetInvalid = true, this._depthTestInvalid = true, this._stencilTestInvalid = true, this._depthWriteInvalid = true, this._colorWriteInvalid = true, this._stencilWriteInvalid = true, this._stateSetters = t3;
  }
  setPipeline(t3) {
    (this._pipelineInvalid || t3 !== this._pipeline) && (this._setBlending(t3.blending), this._setCulling(t3.culling), this._setPolygonOffset(t3.polygonOffset), this._setDepthTest(t3.depthTest), this._setStencilTest(t3.stencilTest), this._setDepthWrite(t3.depthWrite), this._setColorWrite(t3.colorWrite), this._setStencilWrite(t3.stencilWrite), this._pipeline = t3), this._pipelineInvalid = false;
  }
  invalidateBlending() {
    this._blendingInvalid = true, this._pipelineInvalid = true;
  }
  invalidateCulling() {
    this._cullingInvalid = true, this._pipelineInvalid = true;
  }
  invalidatePolygonOffset() {
    this._polygonOffsetInvalid = true, this._pipelineInvalid = true;
  }
  invalidateDepthTest() {
    this._depthTestInvalid = true, this._pipelineInvalid = true;
  }
  invalidateStencilTest() {
    this._stencilTestInvalid = true, this._pipelineInvalid = true;
  }
  invalidateDepthWrite() {
    this._depthWriteInvalid = true, this._pipelineInvalid = true;
  }
  invalidateColorWrite() {
    this._colorWriteInvalid = true, this._pipelineInvalid = true;
  }
  invalidateStencilWrite() {
    this._stencilTestInvalid = true, this._pipelineInvalid = true;
  }
  _setBlending(t3) {
    this._blending = this._setSubState(t3, this._blending, this._blendingInvalid, this._stateSetters.setBlending), this._blendingInvalid = false;
  }
  _setCulling(t3) {
    this._culling = this._setSubState(t3, this._culling, this._cullingInvalid, this._stateSetters.setCulling), this._cullingInvalid = false;
  }
  _setPolygonOffset(t3) {
    this._polygonOffset = this._setSubState(t3, this._polygonOffset, this._polygonOffsetInvalid, this._stateSetters.setPolygonOffset), this._polygonOffsetInvalid = false;
  }
  _setDepthTest(t3) {
    this._depthTest = this._setSubState(t3, this._depthTest, this._depthTestInvalid, this._stateSetters.setDepthTest), this._depthTestInvalid = false;
  }
  _setStencilTest(t3) {
    this._stencilTest = this._setSubState(t3, this._stencilTest, this._stencilTestInvalid, this._stateSetters.setStencilTest), this._stencilTestInvalid = false;
  }
  _setDepthWrite(t3) {
    this._depthWrite = this._setSubState(t3, this._depthWrite, this._depthWriteInvalid, this._stateSetters.setDepthWrite), this._depthWriteInvalid = false;
  }
  _setColorWrite(t3) {
    this._colorWrite = this._setSubState(t3, this._colorWrite, this._colorWriteInvalid, this._stateSetters.setColorWrite), this._colorWriteInvalid = false;
  }
  _setStencilWrite(t3) {
    this._stencilWrite = this._setSubState(t3, this._stencilWrite, this._stencilWriteInvalid, this._stateSetters.setStencilWrite), this._stencilTestInvalid = false;
  }
  _setSubState(t3, e2, i2, n2) {
    return (i2 || t3 !== e2) && (n2(t3), this._pipelineInvalid = true), t3;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderTechnique/ReloadableShaderModule.js
var t2 = class {
  constructor(t3, o2) {
    this._module = t3, this._loadModule = o2;
  }
  get() {
    return this._module;
  }
  async reload() {
    return this._module = await this._loadModule(), this._module;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderTechnique/ShaderTechnique.js
var e = class {
  constructor(i2, t3, e2) {
    this.release = e2, this.initializeConfiguration(i2, t3), this._configuration = t3.snapshot(), this._program = this.initializeProgram(i2), this._pipeline = this.initializePipeline(i2.rctx.capabilities);
  }
  destroy() {
    this._program = t(this._program), this._pipeline = this._configuration = null;
  }
  reload(t3) {
    t(this._program), this._program = this.initializeProgram(t3), this._pipeline = this.initializePipeline(t3.rctx.capabilities);
  }
  get program() {
    return this._program;
  }
  get compiled() {
    return this.program.compiled;
  }
  get key() {
    return this._configuration.key;
  }
  get configuration() {
    return this._configuration;
  }
  bindPipelineState(i2, t3 = null, e2) {
    i2.setPipelineState(this.getPipelineState(t3, e2));
  }
  ensureAttributeLocations(i2) {
    this.program.assertCompatibleVertexAttributeLocations(i2);
  }
  get primitiveType() {
    return E.TRIANGLES;
  }
  getPipelineState(i2, t3) {
    return this._pipeline;
  }
  initializeConfiguration(i2, t3) {
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Program.js
var i = class {
  constructor(i2, s2, o2) {
    this._context = i2, this._locations = o2, this._textures = /* @__PURE__ */ new Map(), this._freeTextureUnits = new l({ deallocator: null }), this._glProgram = i2.programCache.acquire(s2.generate("vertex"), s2.generate("fragment"), o2), this._glProgram.stop = () => {
      throw new Error("Wrapped _glProgram used directly");
    }, this.bindPass = s2.generateBind(a2.Pass, this), this.bindDraw = s2.generateBind(a2.Draw, this), this._fragmentUniforms = a() ? s2.fragmentUniforms : null;
  }
  dispose() {
    this._glProgram.dispose();
  }
  get glName() {
    return this._glProgram.glName;
  }
  get compiled() {
    return this._glProgram.compiled;
  }
  setUniform1b(t3, e2) {
    this._glProgram.setUniform1i(t3, e2 ? 1 : 0);
  }
  setUniform1i(t3, e2) {
    this._glProgram.setUniform1i(t3, e2);
  }
  setUniform1f(t3, e2) {
    this._glProgram.setUniform1f(t3, e2);
  }
  setUniform2fv(t3, e2) {
    this._glProgram.setUniform2fv(t3, e2);
  }
  setUniform3fv(t3, e2) {
    this._glProgram.setUniform3fv(t3, e2);
  }
  setUniform4fv(t3, e2) {
    this._glProgram.setUniform4fv(t3, e2);
  }
  setUniformMatrix3fv(t3, e2) {
    this._glProgram.setUniformMatrix3fv(t3, e2);
  }
  setUniformMatrix4fv(t3, e2) {
    this._glProgram.setUniformMatrix4fv(t3, e2);
  }
  setUniform1fv(t3, e2) {
    this._glProgram.setUniform1fv(t3, e2);
  }
  setUniform1iv(t3, e2) {
    this._glProgram.setUniform1iv(t3, e2);
  }
  setUniform2iv(t3, e2) {
    this._glProgram.setUniform3iv(t3, e2);
  }
  setUniform3iv(t3, e2) {
    this._glProgram.setUniform3iv(t3, e2);
  }
  setUniform4iv(t3, e2) {
    this._glProgram.setUniform4iv(t3, e2);
  }
  assertCompatibleVertexAttributeLocations(t3) {
    t3.locations !== this._locations && console.error("VertexAttributeLocations are incompatible");
  }
  stop() {
    this._textures.clear(), this._freeTextureUnits.clear();
  }
  bindTexture(t3, e2) {
    if (null == e2 || null == e2.glName) {
      const e3 = this._textures.get(t3);
      return e3 && (this._context.bindTexture(null, e3.unit), this._freeTextureUnit(e3), this._textures.delete(t3)), null;
    }
    let r2 = this._textures.get(t3);
    return null == r2 ? (r2 = this._allocTextureUnit(e2), this._textures.set(t3, r2)) : r2.texture = e2, this._context.useProgram(this), this.setUniform1i(t3, r2.unit), this._context.bindTexture(e2, r2.unit), r2.unit;
  }
  rebindTextures() {
    this._context.useProgram(this), this._textures.forEach((t3, e2) => {
      this._context.bindTexture(t3.texture, t3.unit), this.setUniform1i(e2, t3.unit);
    }), null != this._fragmentUniforms && this._fragmentUniforms.forEach((t3) => {
      "sampler2D" !== t3.type && "samplerCube" !== t3.type || this._textures.has(t3.name) || console.error(`Texture sampler ${t3.name} has no bound texture`);
    });
  }
  _allocTextureUnit(t3) {
    return { texture: t3, unit: 0 === this._freeTextureUnits.length ? this._textures.size : this._freeTextureUnits.pop() };
  }
  _freeTextureUnit(t3) {
    this._freeTextureUnits.push(t3.unit);
  }
};

export {
  s,
  l2 as l,
  r,
  o,
  h,
  a3 as a,
  _,
  W,
  M,
  t2 as t,
  e,
  i
};
//# sourceMappingURL=chunk-77DVCCTB.js.map
