import {
  a,
  i as i3,
  l
} from "./chunk-7DUQU7X7.js";
import {
  _,
  i
} from "./chunk-A47VN5MA.js";
import {
  i as i2
} from "./chunk-JBKOFMVJ.js";
import {
  n as n3,
  o
} from "./chunk-SFLHXPT4.js";
import {
  s,
  u
} from "./chunk-HXNDA4EJ.js";
import {
  k2 as k
} from "./chunk-LLQMBVBO.js";
import {
  O
} from "./chunk-7EG7BYWF.js";
import {
  T
} from "./chunk-CNS4YGGN.js";
import {
  c
} from "./chunk-DOQ3SAAR.js";
import {
  m
} from "./chunk-TEHNQYQD.js";
import {
  n as n2
} from "./chunk-CQX57DED.js";
import {
  n
} from "./chunk-UYRCWUYQ.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/intersectorUtilsConversions.js
function f(r2, e) {
  var _a, _b;
  return s(r2) || u(r2) ? V((_a = r2.target) == null ? void 0 : _a.object, e) : n3(r2) ? (_b = e.map) == null ? void 0 : _b.ground : i3(r2) || l(r2) || o(r2) || a(r2) ? V(r2.target, e) : null;
}
function m2(r2, e) {
  const t2 = d(r2, e);
  return null != t2 && "graphic" === t2.type ? t2.graphic : null;
}
function d(r2, e) {
  var _a;
  if (null == r2)
    return null;
  if (s(r2) || u(r2))
    return h((_a = r2.target) == null ? void 0 : _a.object, e);
  if (i3(r2)) {
    const e2 = r2.target.createGraphic();
    return { type: "graphic", graphic: e2, layer: e2.layer };
  }
  if (a(r2)) {
    const e2 = r2.target.createVoxelGraphic();
    return { type: "graphic", graphic: e2, layer: e2.layer };
  }
  return o(r2) || i2(r2) ? h(r2.target, e) : l(r2) ? y(r2.target, e) : null;
}
function h(r2, e) {
  if (null == r2 || null == r2.graphicUid)
    return null;
  const t2 = V(r2, e);
  if (null == t2)
    return null;
  if (t2 === e.graphics)
    return null == e.graphicsView || "number" != typeof r2.graphicUid ? null : e.graphicsView.getHit(r2.graphicUid);
  const n4 = e.allLayerViews.find((r3) => r3.layer === t2);
  return !n4 || n4.suspended || null == r2.graphicUid ? null : "getHit" in n4 ? n4.getHit(r2.graphicUid) : null;
}
function y(r2, e) {
  const t2 = V(r2, e);
  if (null == t2)
    return null;
  const n4 = e.allLayerViews.find((r3) => r3.layer === t2);
  return n4 && !n4.suspended && "getGraphicFromIntersectorTarget" in n4 ? U(n4.getGraphicFromIntersectorTarget(r2)) : null;
}
function j(r2, e) {
  const t2 = V(r2, e);
  if (null == t2)
    return null;
  const n4 = e.allLayerViews.find((r3) => r3.layer === t2);
  return n4 && !n4.suspended && "getAABBFromIntersectorTarget" in n4 ? n4.getAABBFromIntersectorTarget(r2) : null;
}
function U(r2) {
  return null != r2 ? { type: "graphic", graphic: r2, layer: r2.layer } : null;
}
function V(r2, e) {
  return r2 && null != r2.layerUid ? null != e.graphicsView && r2.layerUid === e.graphicsView.processor.layer.id ? e.graphics : e.map.findLayerByUid(r2.layerUid) : null;
}
function b(t2, l2) {
  if (s(t2) || u(t2))
    return k(t2.target.object.boundingVolumeWorldSpace.bounds);
  if (i2(t2)) {
    O(w, t2.transformation);
    const r2 = Math.max(w[0], w[1], w[2]);
    return t2.target.baseBoundingSphere.radius * r2;
  }
  return l(t2) ? n(j(t2.target, l2), (r2) => 0.5 * T(r2)) : null;
}
function B(r2) {
  return !s(r2) && !u(r2) && (i2(r2) ? r2.target.numLodLevels > 1 : !!l(r2));
}
var w = n2();

// node_modules/@arcgis/core/views/input/IViewEvents.js
var t;
!function(t2) {
  t2[t2.Left = 0] = "Left", t2[t2.Middle = 1] = "Middle", t2[t2.Right = 2] = "Right";
}(t || (t = {}));

// node_modules/@arcgis/core/views/input/ViewEvents.js
var r = ["click", "double-click", "immediate-click", "immediate-double-click", "hold", "drag", "key-down", "key-up", "pointer-down", "pointer-move", "pointer-up", "pointer-drag", "mouse-wheel", "pointer-enter", "pointer-leave", "gamepad", "focus", "blur"];
var i4 = {};
function o2(t2) {
  return !!i4[t2];
}
function s2(t2) {
  for (const e of t2)
    if (!o2(e))
      return false;
  return true;
}
r.forEach((t2) => {
  i4[t2] = true;
});
var p = class {
  constructor(t2) {
    this._handlers = /* @__PURE__ */ new Map(), this._counter = 0, this._handlerCounts = /* @__PURE__ */ new Map(), this.view = t2, this.inputManager = null;
  }
  connect(t2) {
    t2 && this.disconnect(), this.inputManager = t2, this._handlers.forEach(({ handler: t3, priority: e }, a2) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.installHandlers(a2, [t3], e);
    });
  }
  disconnect() {
    this.inputManager && this._handlers.forEach((t2, e) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.uninstallHandlers(e);
    }), this.inputManager = null;
  }
  destroy() {
    this.disconnect(), this._handlers.clear(), this.view = null;
  }
  on(t2, e, a2, r2) {
    const i5 = Array.isArray(t2) ? t2 : t2.split(",");
    if (!s2(i5))
      return i5.some(o2) && console.error("Error: registering input events and other events on the view at the same time is not supported."), null;
    let p2, l2;
    Array.isArray(e) ? l2 = e : (p2 = e, l2 = []), "function" == typeof a2 ? p2 = a2 : r2 = a2, r2 = null != r2 ? r2 : _.DEFAULT;
    const u2 = this._createUniqueGroupName(), m3 = new c2(this.view, i5, l2, p2);
    this._handlers.set(u2, { handler: m3, priority: r2 });
    for (const n4 of i5) {
      const t3 = this._handlerCounts.get(n4) || 0;
      this._handlerCounts.set(n4, t3 + 1);
    }
    return this.inputManager && this.inputManager.installHandlers(u2, [m3], r2), { remove: () => this._removeHandler(u2, i5) };
  }
  hasHandler(t2) {
    return !!this._handlerCounts.get(t2);
  }
  _removeHandler(t2, e) {
    if (this._handlers.has(t2)) {
      this._handlers.delete(t2);
      for (const t3 of e) {
        const e2 = this._handlerCounts.get(t3);
        void 0 === e2 ? console.error("Trying to remove handler for event that has no handlers registered: ", t3) : 1 === e2 ? this._handlerCounts.delete(t3) : this._handlerCounts.set(t3, e2 - 1);
      }
    }
    this.inputManager && this.inputManager.uninstallHandlers(t2);
  }
  _createUniqueGroupName() {
    return this._counter += 1, `viewEvents_${this._counter}`;
  }
};
var c2 = class extends i {
  constructor(t2, e, a2, n4) {
    super(true), this._latestDragStart = void 0, this.view = t2;
    for (const r2 of e)
      switch (r2) {
        case "click":
          this.registerIncoming("click", a2, (t3) => n4(this._wrapClick(t3)));
          break;
        case "double-click":
          this.registerIncoming("double-click", a2, (t3) => n4(this._wrapDoubleClick(t3)));
          break;
        case "immediate-click":
          this.registerIncoming("immediate-click", a2, (t3) => n4(this._wrapImmediateClick(t3)));
          break;
        case "immediate-double-click":
          this.registerIncoming("immediate-double-click", a2, (t3) => n4(this._wrapImmediateDoubleClick(t3)));
          break;
        case "hold":
          this.registerIncoming("hold", a2, (t3) => n4(this._wrapHold(t3)));
          break;
        case "drag":
          this.registerIncoming("drag", a2, (t3) => {
            const e2 = this._wrapDrag(t3);
            e2 && n4(e2);
          });
          break;
        case "key-down":
          this.registerIncoming("key-down", a2, (t3) => n4(this._wrapKeyDown(t3)));
          break;
        case "key-up":
          this.registerIncoming("key-up", a2, (t3) => n4(this._wrapKeyUp(t3)));
          break;
        case "pointer-down":
          this.registerIncoming("pointer-down", a2, (t3) => n4(this._wrapPointer(t3, "pointer-down")));
          break;
        case "pointer-move":
          this.registerIncoming("pointer-move", a2, (t3) => n4(this._wrapPointer(t3, "pointer-move")));
          break;
        case "pointer-up":
          this.registerIncoming("pointer-up", a2, (t3) => n4(this._wrapPointer(t3, "pointer-up")));
          break;
        case "pointer-drag":
          this.registerIncoming("pointer-drag", a2, (t3) => n4(this._wrapPointerDrag(t3)));
          break;
        case "mouse-wheel":
          this.registerIncoming("mouse-wheel", a2, (t3) => n4(this._wrapMouseWheel(t3)));
          break;
        case "pointer-enter":
          this.registerIncoming("pointer-enter", a2, (t3) => n4(this._wrapPointer(t3, "pointer-enter")));
          break;
        case "pointer-leave":
          this.registerIncoming("pointer-leave", a2, (t3) => n4(this._wrapPointer(t3, "pointer-leave")));
          break;
        case "gamepad":
          this.registerIncoming("gamepad", a2, (t3) => {
            n4(this._wrapGamepad(t3));
          });
          break;
        case "focus":
          this.registerIncoming("focus", a2, (t3) => {
            n4(this._wrapFocus(t3));
          });
          break;
        case "blur":
          this.registerIncoming("blur", a2, (t3) => {
            n4(this._wrapBlur(t3));
          });
      }
  }
  _wrapFocus(t2) {
    return { type: "focus", timestamp: t2.timestamp, native: t2.data.native, cancelable: t2.cancelable, stopPropagation: () => t2.stopPropagation(), async: (e) => t2.async(e), preventDefault: () => t2.preventDefault() };
  }
  _wrapBlur(t2) {
    return { type: "blur", timestamp: t2.timestamp, native: t2.data.native, cancelable: t2.cancelable, stopPropagation: () => t2.stopPropagation(), async: (e) => t2.async(e), preventDefault: () => t2.preventDefault() };
  }
  _wrapClick(t2) {
    const { pointerType: a2, button: n4, buttons: r2, x: i5, y: o3, native: s3, eventId: p2 } = t2.data, { cancelable: c3, timestamp: l2 } = t2;
    return { type: "click", pointerType: a2, button: n4, buttons: r2, x: i5, y: o3, native: s3, timestamp: l2, screenPoint: c(i5, o3), mapPoint: this._getMapPoint(i5, o3), eventId: p2, cancelable: c3, stopPropagation: () => t2.stopPropagation(), async: (e) => t2.async(e), preventDefault: () => t2.preventDefault() };
  }
  _wrapDoubleClick(t2) {
    const { pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, eventId: s3 } = t2.data, { cancelable: p2, timestamp: c3 } = t2;
    return { type: "double-click", pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, timestamp: c3, mapPoint: this._getMapPoint(r2, i5), eventId: s3, cancelable: p2, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapImmediateClick(t2) {
    const { pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, eventId: s3 } = t2.data, p2 = o3.pointerId, { cancelable: c3, timestamp: l2 } = t2;
    return { type: "immediate-click", pointerId: p2, pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, timestamp: l2, mapPoint: this._getMapPoint(r2, i5), eventId: s3, cancelable: c3, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapImmediateDoubleClick(t2) {
    const { pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, eventId: s3 } = t2.data, p2 = o3.pointerId, { cancelable: c3, timestamp: l2 } = t2;
    return { type: "immediate-double-click", pointerId: p2, pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, timestamp: l2, mapPoint: this._getMapPoint(r2, i5), eventId: s3, cancelable: c3, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapHold(t2) {
    const { pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3 } = t2.data, { cancelable: s3, timestamp: p2 } = t2;
    return { type: "hold", pointerType: e, button: a2, buttons: n4, x: r2, y: i5, native: o3, timestamp: p2, mapPoint: this._getMapPoint(r2, i5), cancelable: s3, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _getMapPoint(t2, a2) {
    return this.view.toMap(c(t2, a2), { exclude: [] });
  }
  _wrapDrag(e) {
    const a2 = e.data, { x: n4, y: r2 } = a2.center, { action: i5, pointerType: o3, button: s3 } = a2;
    if ("start" === i5 && (this._latestDragStart = a2), !this._latestDragStart)
      return;
    const p2 = a2.pointer.native, c3 = a2.buttons, { cancelable: l2, timestamp: u2 } = e, m3 = { x: this._latestDragStart.center.x, y: this._latestDragStart.center.y };
    return "end" === i5 && (this._latestDragStart = void 0), { type: "drag", action: i5, x: n4, y: r2, origin: m3, pointerType: o3, button: s3, buttons: c3, radius: a2.radius, angle: m(a2.angle), native: p2, timestamp: u2, cancelable: l2, stopPropagation: () => e.stopPropagation(), async: (t2) => e.async(t2), preventDefault: () => e.preventDefault() };
  }
  _wrapKeyDown(t2) {
    const { key: e, repeat: a2, native: n4 } = t2.data, { cancelable: r2, timestamp: i5 } = t2;
    return { type: "key-down", key: e, repeat: a2, native: n4, timestamp: i5, cancelable: r2, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapKeyUp(t2) {
    const { key: e, native: a2 } = t2.data, { cancelable: n4, timestamp: r2 } = t2;
    return { type: "key-up", key: e, native: a2, timestamp: r2, cancelable: n4, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapPointer(t2, e) {
    const { x: a2, y: n4, button: r2, buttons: i5, native: o3, eventId: s3 } = t2.data, p2 = o3.pointerId, c3 = o3.pointerType, { cancelable: l2, timestamp: u2 } = t2;
    return { type: e, x: a2, y: n4, pointerId: p2, pointerType: c3, button: r2, buttons: i5, native: o3, timestamp: u2, eventId: s3, cancelable: l2, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapPointerDrag(t2) {
    const { x: e, y: a2, buttons: n4, native: r2, eventId: i5 } = t2.data.currentEvent, { button: o3 } = t2.data.startEvent, s3 = t2.data.startEvent.native.pointerId, p2 = t2.data.startEvent.native.pointerType, c3 = t2.data.action, l2 = { x: t2.data.startEvent.x, y: t2.data.startEvent.y }, { cancelable: u2, timestamp: m3 } = t2;
    return { type: "pointer-drag", x: e, y: a2, pointerId: s3, pointerType: p2, button: o3, buttons: n4, action: c3, origin: l2, native: r2, timestamp: m3, eventId: i5, cancelable: u2, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapMouseWheel(t2) {
    const { cancelable: e, data: a2, timestamp: n4 } = t2, { x: r2, y: i5, deltaY: o3, native: s3 } = a2;
    return { type: "mouse-wheel", x: r2, y: i5, deltaY: o3, native: s3, timestamp: n4, cancelable: e, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
  _wrapGamepad(t2) {
    const { action: e, state: a2, device: n4 } = t2.data, { cancelable: r2, timestamp: i5 } = t2, { buttons: o3, axes: s3 } = a2;
    return { type: "gamepad", device: n4, timestamp: i5, action: e, buttons: o3, axes: s3, cancelable: r2, stopPropagation: () => t2.stopPropagation(), async: (e2) => t2.async(e2), preventDefault: () => t2.preventDefault() };
  }
};

export {
  t,
  r,
  p,
  f,
  m2 as m,
  d,
  b,
  B
};
//# sourceMappingURL=chunk-H42XE5SX.js.map
