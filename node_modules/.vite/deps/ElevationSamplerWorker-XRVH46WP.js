import {
  T
} from "./chunk-IRHHHG7O.js";
import "./chunk-3VYBBKPH.js";
import "./chunk-DDU77THI.js";
import {
  h
} from "./chunk-GRB6LNZN.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-JPKFB2QL.js";
import "./chunk-2AUW3MT4.js";
import "./chunk-UM64E5NS.js";
import "./chunk-2SZNVP5H.js";
import "./chunk-FIBWCATC.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-DS6JZDZO.js";
import "./chunk-OTNLRAEN.js";
import "./chunk-OKABUMQT.js";
import "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-W3WHCGIQ.js";
import "./chunk-GWA3PLGA.js";
import "./chunk-REPJV7SP.js";
import "./chunk-F42HXUMI.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import "./chunk-453UIKKW.js";
import "./chunk-5BLDWPLW.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import "./chunk-UYRCWUYQ.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import {
  has
} from "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var r = class {
  async createIndex(t, r2) {
    const n2 = new Array();
    if (!t.vertexAttributes || !t.vertexAttributes.position)
      return new h();
    const o = this._createMeshData(t), s = null != r2 ? await r2.invoke("createIndexThread", o, { transferList: n2 }) : this.createIndexThread(o).result;
    return this._createPooledRBush().fromJSON(s);
  }
  createIndexThread(e) {
    const t = new Float64Array(e.position), r2 = this._createPooledRBush();
    return e.components ? this._createIndexComponentsThread(r2, t, e.components.map((e2) => new Uint32Array(e2))) : this._createIndexAllThread(r2, t);
  }
  _createIndexAllThread(e, t) {
    const r2 = new Array(t.length / 9);
    let o = 0;
    for (let s = 0; s < t.length; s += 9)
      r2[o++] = n(t, s, s + 3, s + 6);
    return e.load(r2), { result: e.toJSON() };
  }
  _createIndexComponentsThread(e, t, r2) {
    let o = 0;
    for (const n2 of r2)
      o += n2.length / 3;
    const s = new Array(o);
    let a = 0;
    for (const i of r2)
      for (let e2 = 0; e2 < i.length; e2 += 3)
        s[a++] = n(t, 3 * i[e2], 3 * i[e2 + 1], 3 * i[e2 + 2]);
    return e.load(s), { result: e.toJSON() };
  }
  _createMeshData(e) {
    const r2 = (e.vertexSpace.isRelative ? T({ position: e.vertexAttributes.position, normal: null, tangent: null }, e.vertexSpace, e.transform, e.spatialReference).position : e.vertexAttributes.position).buffer;
    return !e.components || e.components.some((e2) => !e2.faces) ? { position: r2 } : { position: r2, components: e.components.map((e2) => e2.faces) };
  }
  _createPooledRBush() {
    return new h(9, has("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
  }
};
function n(e, t, r2, n2) {
  return { minX: Math.min(e[t], e[r2], e[n2]), maxX: Math.max(e[t], e[r2], e[n2]), minY: Math.min(e[t + 1], e[r2 + 1], e[n2 + 1]), maxY: Math.max(e[t + 1], e[r2 + 1], e[n2 + 1]), p0: [e[t], e[t + 1], e[t + 2]], p1: [e[r2], e[r2 + 1], e[r2 + 2]], p2: [e[n2], e[n2 + 1], e[n2 + 2]] };
}
export {
  r as default
};
//# sourceMappingURL=ElevationSamplerWorker-XRVH46WP.js.map
