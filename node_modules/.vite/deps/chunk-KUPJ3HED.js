import {
  h
} from "./chunk-36L3RRF7.js";
import {
  o as o4
} from "./chunk-OUYOFOVY.js";
import {
  o as o2
} from "./chunk-HVLYIZVQ.js";
import {
  e as e3
} from "./chunk-FDGDKKWR.js";
import {
  e as e2
} from "./chunk-25GSBURT.js";
import {
  o as o3
} from "./chunk-2ORXZKWN.js";
import {
  e
} from "./chunk-CW7LIPBH.js";
import {
  i
} from "./chunk-7EG7BYWF.js";
import {
  o
} from "./chunk-TPJLFGOT.js";
import {
  f,
  n
} from "./chunk-CQX57DED.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js
function f2(r, a) {
  a.instancedDoublePrecision ? r.constants.add("cameraPosition", "vec3", f) : r.uniforms.add(new o2("cameraPosition", (r2, a2) => o(w, a2.camera.viewInverseTransposeMatrix[3] - r2.origin[0], a2.camera.viewInverseTransposeMatrix[7] - r2.origin[1], a2.camera.viewInverseTransposeMatrix[11] - r2.origin[2])));
}
function p(a, i2) {
  if (!i2.instancedDoublePrecision)
    return void a.uniforms.add(new e3("proj", (r, a2) => a2.camera.projectionMatrix), new o4("view", (a2, e4) => i(v, e4.camera.viewMatrix, a2.origin)), new o2("localOrigin", (r) => r.origin));
  const o5 = (r) => o(w, r.camera.viewInverseTransposeMatrix[3], r.camera.viewInverseTransposeMatrix[7], r.camera.viewInverseTransposeMatrix[11]);
  a.uniforms.add(new e3("proj", (r, a2) => a2.camera.projectionMatrix), new e3("view", (a2, e4) => i(v, e4.camera.viewMatrix, o5(e4))), new e2("localOrigin", (r, a2) => o5(a2)));
}
var v = e();
var w = n();
function u(r) {
  r.uniforms.add(new e3("viewNormal", (r2, a) => a.camera.viewInverseTransposeMatrix));
}
function l(r, a) {
  r.uniforms.add(new o3("pixelRatio", (r2, e4) => e4.camera.pixelRatio / (a.draped ? h : 1)));
}

export {
  f2 as f,
  p,
  u,
  l
};
//# sourceMappingURL=chunk-KUPJ3HED.js.map
