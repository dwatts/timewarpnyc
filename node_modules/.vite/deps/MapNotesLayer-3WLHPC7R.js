import {
  n
} from "./chunk-MIHFHM6P.js";
import {
  b as b2
} from "./chunk-PVUG2RDQ.js";
import "./chunk-J3HE7QNA.js";
import {
  Be
} from "./chunk-3VPZVTN6.js";
import "./chunk-QI23XDMF.js";
import "./chunk-7OGVILXO.js";
import "./chunk-XXTY5WL7.js";
import "./chunk-FARFKR7T.js";
import "./chunk-FN34IFMV.js";
import "./chunk-2YAYYYAB.js";
import "./chunk-6AEQHCZC.js";
import "./chunk-4KXQQ53L.js";
import "./chunk-TBKQVVVQ.js";
import "./chunk-MWAJRN5U.js";
import "./chunk-EUVEJGWN.js";
import "./chunk-F7YRUNS5.js";
import "./chunk-D3WWUQCY.js";
import "./chunk-WVOJZIIB.js";
import "./chunk-RF5IWX6P.js";
import "./chunk-GU7K6YXW.js";
import "./chunk-CDI6XFV5.js";
import "./chunk-QPX2ZKPM.js";
import "./chunk-SJSAYHBJ.js";
import "./chunk-S5B42CTM.js";
import "./chunk-252JHW3U.js";
import "./chunk-KPA3L4VZ.js";
import "./chunk-OK4LIPGX.js";
import "./chunk-WXSXHXM4.js";
import "./chunk-5PY53SV2.js";
import "./chunk-S7O4FDVD.js";
import "./chunk-MR3XQOHR.js";
import "./chunk-F66BE4ZW.js";
import "./chunk-PYQNXC2L.js";
import "./chunk-NHHKW3WR.js";
import "./chunk-V4EIGIRT.js";
import "./chunk-MD5VUVM5.js";
import "./chunk-CF43FEIV.js";
import "./chunk-GNESNC4Q.js";
import "./chunk-VYG5A4VI.js";
import "./chunk-ANW6V73Y.js";
import "./chunk-FJ3XUIT3.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-BFZI4PK4.js";
import "./chunk-KUZEG5DZ.js";
import {
  j
} from "./chunk-QO446QEK.js";
import "./chunk-4FZRA4VI.js";
import {
  c as c2
} from "./chunk-G32FVJ4L.js";
import {
  O
} from "./chunk-XJXVKVA7.js";
import "./chunk-HVAOWOGC.js";
import "./chunk-6NPJZOPM.js";
import "./chunk-MNR4BIGQ.js";
import "./chunk-FVR25IMN.js";
import "./chunk-IHCIS6PT.js";
import "./chunk-OHH3UAUS.js";
import "./chunk-EIQYIBNS.js";
import "./chunk-2NTQWEQZ.js";
import "./chunk-QZ6WR57P.js";
import "./chunk-E2PV5YTZ.js";
import "./chunk-GLVTFP5O.js";
import "./chunk-YGUWDSEH.js";
import {
  $,
  Cn,
  Y,
  nn,
  tn
} from "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-2TWR6EVF.js";
import "./chunk-MIHY6FSC.js";
import "./chunk-IR32DXLL.js";
import "./chunk-7BMUKKBX.js";
import {
  y as y2
} from "./chunk-WIQR3T32.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-DKJBDKGA.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DR3XNW4L.js";
import "./chunk-DKCDRJ5N.js";
import "./chunk-PCTUO7WS.js";
import {
  h
} from "./chunk-L2P4ZIKN.js";
import "./chunk-OAT35OSI.js";
import {
  a as a3
} from "./chunk-BS4MX2AF.js";
import {
  t
} from "./chunk-R47DHBCM.js";
import "./chunk-KGA7WAD3.js";
import "./chunk-ZEMUATMN.js";
import "./chunk-RG2YRACH.js";
import "./chunk-ZUBHLDU6.js";
import "./chunk-C3PCK5WU.js";
import "./chunk-HE256ZWN.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-OZXJDVTE.js";
import {
  b
} from "./chunk-PZXYASUU.js";
import "./chunk-3ESTI2X4.js";
import "./chunk-YK2WEG7V.js";
import "./chunk-GVQH342Z.js";
import "./chunk-POEWD5LS.js";
import "./chunk-HTVQN75V.js";
import "./chunk-W3WHCGIQ.js";
import "./chunk-HPWZ2OON.js";
import {
  h as h2
} from "./chunk-WAPUHORU.js";
import "./chunk-HXDFHMRK.js";
import {
  S2,
  m as m2,
  m3,
  y as y3
} from "./chunk-5HSVWQOA.js";
import "./chunk-C2BBLDPU.js";
import "./chunk-GWA3PLGA.js";
import "./chunk-FXWSVUF2.js";
import "./chunk-CNS4YGGN.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-UHAU5IXU.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-CEXY22SC.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7JNPZC53.js";
import "./chunk-ZXXKE5XP.js";
import "./chunk-MATER45R.js";
import "./chunk-6UW2VZVV.js";
import {
  V
} from "./chunk-GAARA5JM.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-F42HXUMI.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-UNJDKTFU.js";
import "./chunk-DH42JQZX.js";
import "./chunk-674HAVOZ.js";
import "./chunk-MHGDFNBE.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import {
  C,
  H,
  J,
  c,
  m
} from "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import {
  M
} from "./chunk-T35GN7EL.js";
import {
  f
} from "./chunk-7U6V6KY2.js";
import {
  S2 as S,
  o as o2,
  r
} from "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import {
  y
} from "./chunk-453UIKKW.js";
import {
  a2,
  s as s2
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import "./chunk-UYRCWUYQ.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import {
  a,
  o
} from "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/layers/MapNotesLayer.js
function B(e2) {
  return "markup" === e2.featureCollectionType || e2.layers.some((e3) => null != e3.layerDefinition.visibilityField || !k(e3));
}
function k({ layerDefinition: e2, featureSet: t2 }) {
  const r2 = e2.geometryType ?? t2.geometryType;
  return $2.find((t3) => {
    var _a, _b, _c;
    return r2 === t3.geometryTypeJSON && ((_c = (_b = (_a = e2.drawingInfo) == null ? void 0 : _a.renderer) == null ? void 0 : _b.symbol) == null ? void 0 : _c.type) === t3.identifyingSymbol.type;
  });
}
function z() {
  return new M({ xmin: -180, ymin: -90, xmax: 180, ymax: 90 });
}
var U = new y2({ name: "OBJECTID", alias: "OBJECTID", type: "oid", nullable: false, editable: false });
var W = new y2({ name: "title", alias: "Title", type: "string", nullable: true, editable: true });
var A = class extends h {
  constructor(e2) {
    super(e2), this.visibilityMode = "inherited";
  }
  initialize() {
    for (const e2 of this.graphics)
      e2.sourceLayer = this.layer;
    this.graphics.on("after-add", (e2) => {
      e2.item.sourceLayer = this.layer;
    }), this.graphics.on("after-remove", (e2) => {
      e2.item.sourceLayer = null;
    });
  }
  get fullExtent() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference, t2 = this.fullBounds;
    return e2 ? null == t2 ? tn(z(), e2).geometry : c(t2, e2) : null;
  }
  get fullBounds() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference;
    if (!e2)
      return null;
    const t2 = C();
    return this.graphics.forEach((r2) => {
      const o3 = null != r2.geometry ? tn(r2.geometry, e2).geometry : null;
      null != o3 && m(t2, "point" === o3.type ? o3 : o3.extent, t2);
    }), H(t2, J) ? null : t2;
  }
  get sublayers() {
    return this.graphics;
  }
};
e([y({ readOnly: true })], A.prototype, "fullExtent", null), e([y({ readOnly: true })], A.prototype, "fullBounds", null), e([y({ readOnly: true })], A.prototype, "sublayers", null), e([y()], A.prototype, "layer", void 0), e([y()], A.prototype, "layerId", void 0), e([y({ readOnly: true })], A.prototype, "visibilityMode", void 0), A = e([a2("esri.layers.MapNotesLayer.MapNotesSublayer")], A);
var $2 = [{ geometryType: "polygon", geometryTypeJSON: "esriGeometryPolygon", id: "polygonLayer", layerId: 0, title: "Polygons", identifyingSymbol: new S2().toJSON() }, { geometryType: "polyline", geometryTypeJSON: "esriGeometryPolyline", id: "polylineLayer", layerId: 1, title: "Polylines", identifyingSymbol: new m2().toJSON() }, { geometryType: "multipoint", geometryTypeJSON: "esriGeometryMultipoint", id: "multipointLayer", layerId: 2, title: "Multipoints", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "pointLayer", layerId: 3, title: "Points", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "textLayer", layerId: 4, title: "Text", identifyingSymbol: new m3().toJSON() }];
var q = class extends a3(t(c2(j(O(b))))) {
  constructor(e2) {
    super(e2), this.capabilities = { operations: { supportsMapNotesEditing: true } }, this.featureCollections = null, this.featureCollectionJSON = null, this.featureCollectionType = "notes", this.legendEnabled = false, this.listMode = "hide-children", this.minScale = 0, this.maxScale = 0, this.spatialReference = f.WGS84, this.sublayers = new V($2.map((e3) => new A({ id: e3.id, layerId: e3.layerId, title: e3.title, layer: this }))), this.title = "Map Notes", this.type = "map-notes", this.visibilityMode = "inherited";
  }
  readCapabilities(e2, t2, r2) {
    return { operations: { supportsMapNotesEditing: !B(t2) && "portal-item" !== (r2 == null ? void 0 : r2.origin) } };
  }
  readFeatureCollections(e2, t2, o3) {
    if (!B(t2))
      return null;
    const i = t2.layers.map((e3) => {
      const t3 = new Be();
      return t3.read(e3, o3), t3;
    });
    return new V({ items: i });
  }
  readLegacyfeatureCollectionJSON(e2, t2) {
    return B(t2) ? a(t2.featureCollection) : null;
  }
  get fullExtent() {
    var _a;
    const e2 = this.spatialReference, t2 = C();
    if (null != this.sublayers)
      this.sublayers.forEach(({ fullBounds: e3 }) => null != e3 ? m(t2, e3, t2) : t2, t2);
    else if ((_a = this.featureCollectionJSON) == null ? void 0 : _a.layers.some((e3) => e3.layerDefinition.extent)) {
      this.featureCollectionJSON.layers.forEach((r2) => {
        const o3 = tn(r2.layerDefinition.extent, e2).geometry;
        null != o3 && m(t2, o3, t2);
      });
    }
    return H(t2, J) ? tn(z(), e2).geometry : c(t2, e2);
  }
  readMinScale(e2, t2) {
    for (const r2 of t2.layers)
      if (null != r2.layerDefinition.minScale)
        return r2.layerDefinition.minScale;
    return 0;
  }
  readMaxScale(e2, t2) {
    for (const r2 of t2.layers)
      if (null != r2.layerDefinition.maxScale)
        return r2.layerDefinition.maxScale;
    return 0;
  }
  get multipointLayer() {
    return this._findSublayer("multipointLayer");
  }
  get pointLayer() {
    return this._findSublayer("pointLayer");
  }
  get polygonLayer() {
    return this._findSublayer("polygonLayer");
  }
  get polylineLayer() {
    return this._findSublayer("polylineLayer");
  }
  readSpatialReference(e2, t2) {
    return t2.layers.length ? f.fromJSON(t2.layers[0].layerDefinition.spatialReference) : f.WGS84;
  }
  readSublayers(e2, o3, i) {
    if (B(o3))
      return null;
    const l = [];
    let a4 = o3.layers.reduce((e3, t2) => Math.max(e3, t2.layerDefinition.id ?? -1), -1) + 1;
    for (const r2 of o3.layers) {
      const { layerDefinition: e3, featureSet: o4 } = r2, i2 = e3.id ?? a4++, n2 = k(r2);
      if (null != n2) {
        const r3 = new A({ id: n2.id, title: e3.name, layerId: i2, layer: this, graphics: o4.features.map(({ geometry: e4, symbol: r4, attributes: o5, popupInfo: i3 }) => h2.fromJSON({ attributes: o5, geometry: e4, symbol: r4, popupTemplate: i3 })) });
        l.push(r3);
      }
    }
    return new V(l);
  }
  writeSublayers(e2, t2, r2, i) {
    var _a;
    const { minScale: l, maxScale: n2 } = this;
    if (null == e2)
      return;
    const s3 = e2.some((e3) => e3.graphics.length > 0);
    if (!this.capabilities.operations.supportsMapNotesEditing)
      return void (s3 && ((_a = i == null ? void 0 : i.messages) == null ? void 0 : _a.push(new s("map-notes-layer:editing-not-supported", "New map notes cannot be added to this layer"))));
    const p = [];
    let y4 = this.spatialReference.toJSON();
    e:
      for (const o3 of e2)
        for (const e3 of o3.graphics)
          if (null != e3.geometry) {
            y4 = e3.geometry.spatialReference.toJSON();
            break e;
          }
    for (const o3 of $2) {
      const t3 = e2.find((e3) => o3.id === e3.id);
      this._writeMapNoteSublayer(p, t3, o3, l, n2, y4, i);
    }
    o("featureCollection.layers", p, t2);
  }
  get textLayer() {
    return this._findSublayer("textLayer");
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Feature Collection"] }, e2)), Promise.resolve(this);
  }
  read(e2, t2) {
    "featureCollection" in e2 && (e2 = a(e2), Object.assign(e2, e2.featureCollection)), super.read(e2, t2);
  }
  async beforeSave() {
    if (null == this.sublayers)
      return;
    let e2 = null;
    const t2 = [];
    for (const o3 of this.sublayers)
      for (const r3 of o3.graphics)
        if (null != r3.geometry) {
          const o4 = r3.geometry;
          e2 ? S(o4.spatialReference, e2) || (Cn(o4.spatialReference, e2) || Y() || await $(), r3.geometry = nn(o4, e2)) : e2 = o4.spatialReference, t2.push(r3);
        }
    const r2 = await b2(t2.map((e3) => e3.geometry));
    t2.forEach((e3, t3) => e3.geometry = r2[t3]);
  }
  _findSublayer(e2) {
    var _a;
    return null == this.sublayers ? null : ((_a = this.sublayers) == null ? void 0 : _a.find((t2) => t2.id === e2)) ?? null;
  }
  _writeMapNoteSublayer(e2, t2, r2, o3, l, a4, n2) {
    const s3 = [];
    if (null != t2) {
      for (const e3 of t2.graphics)
        this._writeMapNote(s3, e3, r2.geometryType, n2);
      this._normalizeObjectIds(s3, U), e2.push({ layerDefinition: { name: t2.title, drawingInfo: { renderer: { type: "simple", symbol: a(r2.identifyingSymbol) } }, id: t2.layerId, geometryType: r2.geometryTypeJSON, minScale: o3, maxScale: l, objectIdField: "OBJECTID", fields: [U.toJSON(), W.toJSON()], spatialReference: a4 }, featureSet: { features: s3, geometryType: r2.geometryTypeJSON } });
    }
  }
  _writeMapNote(e2, t2, r2, o3) {
    var _a, _b;
    if (null == t2)
      return;
    const { geometry: i, symbol: l, popupTemplate: a4 } = t2;
    if (null == i)
      return;
    if (i.type !== r2)
      return void ((_a = o3 == null ? void 0 : o3.messages) == null ? void 0 : _a.push(new s2("map-notes-layer:invalid-geometry-type", `Geometry "${i.type}" cannot be saved in "${r2}" layer`, { graphic: t2 })));
    if (null == l)
      return void ((_b = o3 == null ? void 0 : o3.messages) == null ? void 0 : _b.push(new s2("map-notes-layer:no-symbol", "Skipping map notes with no symbol", { graphic: t2 })));
    const s3 = { attributes: { ...t2.attributes }, geometry: i.toJSON(), symbol: l.toJSON() };
    null != a4 && (s3.popupInfo = a4.toJSON()), e2.push(s3);
  }
  _normalizeObjectIds(e2, t2) {
    const r2 = t2.name;
    let o3 = n(r2, e2) + 1;
    const i = /* @__PURE__ */ new Set();
    for (const l of e2) {
      l.attributes || (l.attributes = {});
      const { attributes: e3 } = l;
      (null == e3[r2] || i.has(e3[r2])) && (e3[r2] = o3++), i.add(e3[r2]);
    }
  }
};
e([y({ readOnly: true })], q.prototype, "capabilities", void 0), e([o2(["portal-item", "web-map"], "capabilities", ["layers"])], q.prototype, "readCapabilities", null), e([y({ readOnly: true })], q.prototype, "featureCollections", void 0), e([o2(["web-map", "portal-item"], "featureCollections", ["layers"])], q.prototype, "readFeatureCollections", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { enabled: true, target: "featureCollection" } } } } })], q.prototype, "featureCollectionJSON", void 0), e([o2(["web-map", "portal-item"], "featureCollectionJSON", ["featureCollection"])], q.prototype, "readLegacyfeatureCollectionJSON", null), e([y({ readOnly: true, json: { read: true, write: { enabled: true, ignoreOrigin: true } } })], q.prototype, "featureCollectionType", void 0), e([y({ readOnly: true })], q.prototype, "fullExtent", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { target: "featureCollection.showLegend", overridePolicy() {
  return { enabled: null != this.featureCollectionJSON };
} } } } } })], q.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide", "hide-children"] })], q.prototype, "listMode", void 0), e([y({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "minScale", void 0), e([o2(["web-map", "portal-item"], "minScale", ["layers"])], q.prototype, "readMinScale", null), e([y({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "maxScale", void 0), e([o2(["web-map", "portal-item"], "maxScale", ["layers"])], q.prototype, "readMaxScale", null), e([y({ readOnly: true })], q.prototype, "multipointLayer", null), e([y({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], q.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], q.prototype, "pointLayer", null), e([y({ readOnly: true })], q.prototype, "polygonLayer", null), e([y({ readOnly: true })], q.prototype, "polylineLayer", null), e([y({ type: f })], q.prototype, "spatialReference", void 0), e([o2(["web-map", "portal-item"], "spatialReference", ["layers"])], q.prototype, "readSpatialReference", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true } } } } })], q.prototype, "sublayers", void 0), e([o2("web-map", "sublayers", ["layers"])], q.prototype, "readSublayers", null), e([r("web-map", "sublayers")], q.prototype, "writeSublayers", null), e([y({ readOnly: true })], q.prototype, "textLayer", null), e([y()], q.prototype, "title", void 0), e([y({ readOnly: true, json: { read: false } })], q.prototype, "type", void 0), q = e([a2("esri.layers.MapNotesLayer")], q);
var H2 = q;
export {
  H2 as default
};
//# sourceMappingURL=MapNotesLayer-3WLHPC7R.js.map
