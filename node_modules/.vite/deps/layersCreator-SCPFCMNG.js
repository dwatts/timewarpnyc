import {
  m
} from "./chunk-MPPO4QDR.js";
import "./chunk-GR3PXOTG.js";
import "./chunk-DVPDHUNF.js";
import "./chunk-YFVUJILV.js";
import {
  a
} from "./chunk-DZS6FRUN.js";
import {
  t
} from "./chunk-KUZEG5DZ.js";
import "./chunk-4FZRA4VI.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-2TWR6EVF.js";
import "./chunk-DR3XNW4L.js";
import "./chunk-DKCDRJ5N.js";
import {
  x
} from "./chunk-PCTUO7WS.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-PZXYASUU.js";
import "./chunk-W3WHCGIQ.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-7JNPZC53.js";
import {
  V
} from "./chunk-GAARA5JM.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-UNJDKTFU.js";
import "./chunk-DH42JQZX.js";
import "./chunk-674HAVOZ.js";
import "./chunk-MHGDFNBE.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import "./chunk-453UIKKW.js";
import "./chunk-5BLDWPLW.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import {
  j
} from "./chunk-UYRCWUYQ.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/portal/support/featureCollectionUtils.js
function e(e2) {
  return t2(e2, "notes");
}
function r(e2) {
  return t2(e2, "markup");
}
function n(e2) {
  return t2(e2, "route");
}
function t2(e2, r2) {
  return !(!e2.layerType || "ArcGISFeatureLayer" !== e2.layerType) && e2.featureCollectionType === r2;
}

// node_modules/@arcgis/core/layers/support/layersCreator.js
async function c(e2, a2, y) {
  if (!a2)
    return;
  const t3 = [];
  for (const r2 of a2) {
    const e3 = f(r2, y);
    "GroupLayer" === r2.layerType ? t3.push(b(e3, r2, y)) : t3.push(e3);
  }
  const i = await j(t3);
  for (const r2 of i)
    r2.value && e2.add(r2.value);
}
var l = { ArcGISDimensionLayer: "DimensionLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", PointCloudLayer: "PointCloudLayer", ArcGISSceneServiceLayer: "SceneLayer", IntegratedMeshLayer: "IntegratedMeshLayer", OGCFeatureLayer: "OGCFeatureLayer", BuildingSceneLayer: "BuildingSceneLayer", ArcGISTiledElevationServiceLayer: "ElevationLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", GroupLayer: "GroupLayer", GeoJSON: "GeoJSONLayer", WebTiledLayer: "WebTileLayer", CSV: "CSVLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer", KML: "KMLLayer", RasterDataLayer: "UnsupportedLayer", Voxel: "VoxelLayer", LineOfSightLayer: "LineOfSightLayer" };
var s = { ArcGISTiledElevationServiceLayer: "ElevationLayer", DefaultTileLayer: "ElevationLayer", RasterDataElevationLayer: "UnsupportedLayer" };
var p = { ArcGISTiledMapServiceLayer: "TileLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", OpenStreetMap: "OpenStreetMapLayer", WebTiledLayer: "WebTileLayer", VectorTileLayer: "VectorTileLayer", ArcGISImageServiceLayer: "UnsupportedLayer", WMS: "UnsupportedLayer", ArcGISMapServiceLayer: "UnsupportedLayer", ArcGISSceneServiceLayer: "SceneLayer", DefaultTileLayer: "TileLayer" };
var S = { ArcGISAnnotationLayer: "UnsupportedLayer", ArcGISDimensionLayer: "UnsupportedLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISStreamLayer: "StreamLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", CSV: "CSVLayer", DefaultTileLayer: "TileLayer", GeoRSS: "GeoRSSLayer", GeoJSON: "GeoJSONLayer", GroupLayer: "GroupLayer", KML: "KMLLayer", MediaLayer: "MediaLayer", OGCFeatureLayer: "OGCFeatureLayer", OrientedImageryLayer: "OrientedImageryLayer", SubtypeGroupLayer: "SubtypeGroupLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", WebTiledLayer: "WebTileLayer" };
var u = { ArcGISFeatureLayer: "FeatureLayer" };
var d = { ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", OpenStreetMap: "OpenStreetMapLayer", VectorTileLayer: "VectorTileLayer", WebTiledLayer: "WebTileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer" };
var I = { ...S, LinkChartLayer: "LinkChartLayer" };
var m2 = { ...u };
var T = { ...d };
async function f(e2, r2) {
  return g(await G(e2, r2), e2, r2);
}
async function g(e2, r2, a2) {
  const y = new e2();
  return y.read(r2, a2.context), "group" === y.type && M(r2) && await w(y, r2, a2.context), await t(y, a2.context), y;
}
async function G(e2, r2) {
  var _a;
  const o = r2.context, c2 = v(o);
  let l2 = e2.layerType || e2.type;
  !l2 && r2 && r2.defaultLayerType && (l2 = r2.defaultLayerType);
  const s2 = c2[l2];
  let p2 = s2 ? a[s2] : a.UnknownLayer;
  if (A(e2)) {
    const r3 = o == null ? void 0 : o.portal;
    if (e2.itemId) {
      const t3 = new x({ id: e2.itemId, portal: r3 });
      await t3.load();
      const i = (await m(t3)).className || "UnknownLayer";
      p2 = a[i];
    }
  } else
    "ArcGISFeatureLayer" === l2 ? e(e2) || r(e2) ? p2 = a.MapNotesLayer : n(e2) ? p2 = a.RouteLayer : M(e2) && (p2 = a.GroupLayer) : e2.wmtsInfo && e2.wmtsInfo.url && e2.wmtsInfo.layerIdentifier ? p2 = a.WMTSLayer : "WFS" === l2 && "2.0.0" !== ((_a = e2.wfsInfo) == null ? void 0 : _a.version) && (p2 = a.UnsupportedLayer);
  return p2();
}
function M(e2) {
  var _a, _b;
  if ("ArcGISFeatureLayer" !== e2.layerType || A(e2))
    return false;
  return (((_b = (_a = e2.featureCollection) == null ? void 0 : _a.layers) == null ? void 0 : _b.length) ?? 0) > 1;
}
function A(e2) {
  return "Feature Collection" === e2.type;
}
function v(e2) {
  let r2;
  switch (e2.origin) {
    case "web-scene":
      switch (e2.layerContainerType) {
        case "basemap":
          r2 = p;
          break;
        case "ground":
          r2 = s;
          break;
        default:
          r2 = l;
      }
      break;
    case "link-chart":
      switch (e2.layerContainerType) {
        case "basemap":
          r2 = T;
          break;
        case "tables":
          r2 = m2;
          break;
        default:
          r2 = I;
      }
      break;
    default:
      switch (e2.layerContainerType) {
        case "basemap":
          r2 = d;
          break;
        case "tables":
          r2 = u;
          break;
        default:
          r2 = S;
      }
  }
  return r2;
}
async function b(r2, a2, y) {
  const t3 = new V(), i = c(t3, Array.isArray(a2.layers) ? a2.layers : [], y);
  try {
    const e2 = await r2;
    try {
      if (await i, "group" === e2.type)
        return e2.layers.addMany(t3), e2;
    } catch (L) {
      e2.destroy();
      for (const e3 of t3)
        e3.destroy();
      throw L;
    }
  } catch (L) {
    throw L;
  }
}
async function w(e2, r2, y) {
  var _a;
  const t3 = a.FeatureLayer, i = await t3(), L = r2.featureCollection, n2 = L == null ? void 0 : L.showLegend, o = (_a = L == null ? void 0 : L.layers) == null ? void 0 : _a.map((a2, t4) => {
    var _a2;
    const L2 = new i();
    L2.read(a2, y);
    const o2 = { ...y, ignoreDefaults: true };
    return L2.read({ id: `${e2.id}-sublayer-${t4}`, visibility: ((_a2 = r2.visibleLayers) == null ? void 0 : _a2.includes(t4)) ?? true }, o2), null != n2 && L2.read({ showLegend: n2 }, o2), L2;
  });
  e2.layers.addMany(o ?? []);
}
export {
  c as populateOperationalLayers
};
//# sourceMappingURL=layersCreator-SCPFCMNG.js.map
