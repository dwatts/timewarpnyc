import {
  L,
  d as d4,
  l as l2,
  o
} from "./chunk-A3SLC5TK.js";
import {
  t2 as t4
} from "./chunk-W2BFH4NJ.js";
import {
  E,
  c,
  xt
} from "./chunk-YA6P3ZMV.js";
import "./chunk-OBTF4YMI.js";
import "./chunk-LUW5YH5K.js";
import "./chunk-TFBK4UWT.js";
import "./chunk-57BN4YG4.js";
import "./chunk-DEBQNQHK.js";
import "./chunk-RHUGUXGR.js";
import "./chunk-PKQ2SINV.js";
import "./chunk-SYR2G6XU.js";
import "./chunk-NCJWSWGW.js";
import "./chunk-MHABBCOV.js";
import "./chunk-UVYXRE2S.js";
import {
  n as n5
} from "./chunk-GD75B7SP.js";
import {
  d as d3
} from "./chunk-AGK2CKWJ.js";
import "./chunk-ANLIVU2T.js";
import "./chunk-KGLSZSEH.js";
import "./chunk-WON6TZX6.js";
import "./chunk-Y77F4U6W.js";
import "./chunk-XLELYRDZ.js";
import "./chunk-D4URJU57.js";
import "./chunk-5GTBTJ5J.js";
import "./chunk-NCMHNGYC.js";
import "./chunk-JEI4GCDQ.js";
import "./chunk-NWXX4RT6.js";
import "./chunk-IRHHHG7O.js";
import "./chunk-3VYBBKPH.js";
import "./chunk-DDU77THI.js";
import "./chunk-5RQTPWCM.js";
import "./chunk-B5TYSRH2.js";
import "./chunk-FP4CFXG6.js";
import "./chunk-V5N62ACA.js";
import "./chunk-RMQ3PJIC.js";
import "./chunk-6OVHX5ZO.js";
import "./chunk-3LR4MDXK.js";
import "./chunk-V7IVNH7O.js";
import "./chunk-LLQHB2ZB.js";
import "./chunk-O2Q4W74O.js";
import "./chunk-RRRAGAMB.js";
import "./chunk-PVUG2RDQ.js";
import "./chunk-J3HE7QNA.js";
import "./chunk-GRB6LNZN.js";
import "./chunk-GZTLZ6RD.js";
import {
  f
} from "./chunk-LFQ3TKCC.js";
import "./chunk-HSZYWTXA.js";
import "./chunk-YZ24SAPZ.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-UY6LF23L.js";
import "./chunk-6XUC2FZF.js";
import "./chunk-BUKSB3RJ.js";
import "./chunk-7DUQU7X7.js";
import "./chunk-FQPEAXKN.js";
import "./chunk-QL3WCPM7.js";
import "./chunk-JBKOFMVJ.js";
import "./chunk-LB5DD6MA.js";
import "./chunk-UYTOEYIN.js";
import "./chunk-JQKL7AD5.js";
import "./chunk-UXILD4EC.js";
import "./chunk-SU7C3V7L.js";
import "./chunk-KV3PR5T6.js";
import "./chunk-Y554AESO.js";
import "./chunk-SCHIU6CT.js";
import "./chunk-AD4YIQAV.js";
import "./chunk-4DMQJ2S2.js";
import "./chunk-SFLHXPT4.js";
import "./chunk-ICIEEFA3.js";
import "./chunk-UTDRCXKP.js";
import "./chunk-HXNDA4EJ.js";
import "./chunk-ZFRKFGUZ.js";
import "./chunk-6YRYWMPZ.js";
import "./chunk-ADAZBQKN.js";
import "./chunk-6EBCANA3.js";
import "./chunk-K7N526Q4.js";
import "./chunk-JRSZCAZV.js";
import "./chunk-YIZLAUCA.js";
import "./chunk-3ZJOLTPQ.js";
import "./chunk-V4MUDRER.js";
import "./chunk-FUNFO42Y.js";
import "./chunk-N33CV3QM.js";
import "./chunk-FF3JARPY.js";
import "./chunk-UP7SW73R.js";
import "./chunk-VHOCNQAB.js";
import "./chunk-OK2X54ZK.js";
import "./chunk-RDB3JY7T.js";
import "./chunk-WO5DESPO.js";
import "./chunk-W5D3JTKS.js";
import "./chunk-JGNIGIZR.js";
import "./chunk-LUC7NVZB.js";
import "./chunk-XEG7QIWD.js";
import "./chunk-SFZTK3JV.js";
import "./chunk-GZLXOXKP.js";
import "./chunk-SME753HL.js";
import "./chunk-4QCFWJ22.js";
import "./chunk-PC4A4CQR.js";
import "./chunk-MIJNMSZR.js";
import "./chunk-HKJ2JMCX.js";
import {
  t as t3
} from "./chunk-644IM3NW.js";
import "./chunk-KWPMDFFW.js";
import "./chunk-O25GNIYL.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-KFBN32GM.js";
import "./chunk-N4JKQR77.js";
import "./chunk-ZPXPJ2G7.js";
import "./chunk-GXIJZVS6.js";
import "./chunk-6LC2JTLC.js";
import "./chunk-LYVSHBLV.js";
import "./chunk-NZZXHYUD.js";
import "./chunk-S2XINYNZ.js";
import "./chunk-ZIP4LO57.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-5IGN7QB3.js";
import "./chunk-AN7CDKM7.js";
import "./chunk-AA5GXCZF.js";
import "./chunk-X3ONRBOR.js";
import "./chunk-UF4LSGC7.js";
import "./chunk-VG7E4EAR.js";
import "./chunk-Y5WQRWCP.js";
import "./chunk-JI3FA4UR.js";
import "./chunk-HXPEPPWJ.js";
import "./chunk-A76FH7WO.js";
import "./chunk-3JWSWLNQ.js";
import "./chunk-MUDJ2KE7.js";
import "./chunk-EVSMDRIW.js";
import "./chunk-2CJB7VCN.js";
import "./chunk-5AW2TAZE.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-77DVCCTB.js";
import "./chunk-VVBWSIUG.js";
import "./chunk-TXZY5TKH.js";
import "./chunk-YMGFO2D7.js";
import "./chunk-FZT425TB.js";
import "./chunk-6AORBEIP.js";
import "./chunk-E4SXYCGV.js";
import "./chunk-CYWA6YJM.js";
import "./chunk-5DK7WWJE.js";
import "./chunk-M3ODSYZR.js";
import "./chunk-FB4A6PBH.js";
import "./chunk-UG4QYACC.js";
import "./chunk-GRRIWI4U.js";
import "./chunk-X5HNB5JI.js";
import "./chunk-K43XJEZQ.js";
import "./chunk-6JSGBXI6.js";
import "./chunk-KBPF5PFD.js";
import "./chunk-STAL4WDK.js";
import "./chunk-GXJIA6VA.js";
import "./chunk-L5ONWTZL.js";
import "./chunk-UI5O37MZ.js";
import "./chunk-XFZB3R5P.js";
import "./chunk-YRKEWWDW.js";
import "./chunk-KHQ5TXSL.js";
import "./chunk-NU4UASX6.js";
import "./chunk-LQIVAUXR.js";
import "./chunk-F4YTVHY4.js";
import "./chunk-4FXCMZ3U.js";
import "./chunk-SADO52IH.js";
import "./chunk-FOJITELY.js";
import "./chunk-NCXRF7LF.js";
import "./chunk-73PNWDTS.js";
import "./chunk-PKS3ZVLN.js";
import "./chunk-XMR2X5WG.js";
import "./chunk-KUPJ3HED.js";
import "./chunk-36L3RRF7.js";
import "./chunk-BUCIQGFS.js";
import "./chunk-OUYOFOVY.js";
import "./chunk-HVLYIZVQ.js";
import "./chunk-FDGDKKWR.js";
import "./chunk-25GSBURT.js";
import "./chunk-63ERNIOV.js";
import "./chunk-KKDPZLGI.js";
import "./chunk-XTOI3E3Y.js";
import "./chunk-WT7BDUIR.js";
import "./chunk-IWGINM6K.js";
import "./chunk-WUQZO2AO.js";
import "./chunk-IVCEO3SL.js";
import "./chunk-3RKFJO4O.js";
import "./chunk-P4NNXJS3.js";
import "./chunk-LZAQ3R3T.js";
import "./chunk-Y67AAEQ4.js";
import "./chunk-L2MGQ544.js";
import "./chunk-O2CT6XUA.js";
import "./chunk-DWF7HN4X.js";
import "./chunk-2ORXZKWN.js";
import "./chunk-KTGLOZE4.js";
import "./chunk-K6DV6EVZ.js";
import "./chunk-EDILO3VR.js";
import "./chunk-2CKXYQCA.js";
import "./chunk-JP7O2ZWE.js";
import "./chunk-6AGTIZBD.js";
import "./chunk-UT4ZWPHT.js";
import "./chunk-LWDDTPWX.js";
import "./chunk-LWKRCHND.js";
import "./chunk-USOI6RP2.js";
import "./chunk-TLBJBU3X.js";
import "./chunk-YYE6WDO2.js";
import "./chunk-WDZ5AAFL.js";
import "./chunk-QNBIVGAZ.js";
import "./chunk-5KLICR5E.js";
import "./chunk-RSPVLZNN.js";
import "./chunk-PR2OEILG.js";
import "./chunk-Q3MNDGIO.js";
import "./chunk-JPKFB2QL.js";
import "./chunk-2AUW3MT4.js";
import "./chunk-UM64E5NS.js";
import "./chunk-2SZNVP5H.js";
import "./chunk-MXVQCJ4K.js";
import "./chunk-G4LSNP77.js";
import "./chunk-S5RIUWET.js";
import {
  I
} from "./chunk-MNDNZJD5.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-CUZNACFZ.js";
import "./chunk-ZHUFARKQ.js";
import "./chunk-ICEO3WMK.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-L3FCQBVC.js";
import "./chunk-IUCM3FNB.js";
import "./chunk-PCEMOYTZ.js";
import "./chunk-4RU6WIRN.js";
import "./chunk-3TMT4LDG.js";
import "./chunk-OX5TJXHM.js";
import "./chunk-BDWD2ZNU.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-HLBPEADQ.js";
import "./chunk-FIBWCATC.js";
import "./chunk-NLWV7Q6F.js";
import "./chunk-JPAY3V43.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-RR3IDPQP.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-X7JRTY3V.js";
import "./chunk-VVUQCXYW.js";
import "./chunk-GTUBINZG.js";
import {
  de,
  pe,
  re
} from "./chunk-S7T3AEV6.js";
import {
  n as n4,
  p,
  t as t2
} from "./chunk-3FVFBGNT.js";
import "./chunk-2OFSI5B4.js";
import "./chunk-GAIPUVBM.js";
import "./chunk-FLVP2XLK.js";
import "./chunk-XKENZ7D5.js";
import "./chunk-BPWFCV3C.js";
import {
  a as a3
} from "./chunk-AI6XUWWS.js";
import "./chunk-6S2FCH6S.js";
import {
  n as n3
} from "./chunk-BZL5MAFP.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-XY26YCFX.js";
import "./chunk-3TTW7E7W.js";
import "./chunk-7FNOSSSO.js";
import "./chunk-LLQMBVBO.js";
import "./chunk-DS6JZDZO.js";
import "./chunk-OTNLRAEN.js";
import "./chunk-OKABUMQT.js";
import "./chunk-CW7LIPBH.js";
import "./chunk-TYOIANOD.js";
import "./chunk-VN2IXVGV.js";
import "./chunk-WWUAHPIM.js";
import "./chunk-BN6X2OXK.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-3VPZVTN6.js";
import "./chunk-QI23XDMF.js";
import "./chunk-7OGVILXO.js";
import "./chunk-XXTY5WL7.js";
import "./chunk-FARFKR7T.js";
import "./chunk-FN34IFMV.js";
import "./chunk-2YAYYYAB.js";
import "./chunk-6AEQHCZC.js";
import "./chunk-4KXQQ53L.js";
import {
  d as d2
} from "./chunk-TBKQVVVQ.js";
import "./chunk-MWAJRN5U.js";
import "./chunk-EUVEJGWN.js";
import "./chunk-F7YRUNS5.js";
import "./chunk-D3WWUQCY.js";
import "./chunk-WVOJZIIB.js";
import "./chunk-RF5IWX6P.js";
import "./chunk-GU7K6YXW.js";
import "./chunk-CDI6XFV5.js";
import "./chunk-QPX2ZKPM.js";
import "./chunk-SJSAYHBJ.js";
import "./chunk-S5B42CTM.js";
import "./chunk-252JHW3U.js";
import "./chunk-KPA3L4VZ.js";
import "./chunk-OK4LIPGX.js";
import "./chunk-WXSXHXM4.js";
import "./chunk-5PY53SV2.js";
import "./chunk-S7O4FDVD.js";
import "./chunk-MR3XQOHR.js";
import "./chunk-F66BE4ZW.js";
import "./chunk-PYQNXC2L.js";
import "./chunk-NHHKW3WR.js";
import "./chunk-V4EIGIRT.js";
import "./chunk-MD5VUVM5.js";
import {
  b
} from "./chunk-CF43FEIV.js";
import "./chunk-GNESNC4Q.js";
import "./chunk-VYG5A4VI.js";
import "./chunk-ANW6V73Y.js";
import "./chunk-FJ3XUIT3.js";
import "./chunk-CGJNVOU3.js";
import "./chunk-BFZI4PK4.js";
import "./chunk-KUZEG5DZ.js";
import "./chunk-QO446QEK.js";
import "./chunk-4FZRA4VI.js";
import "./chunk-G32FVJ4L.js";
import "./chunk-XJXVKVA7.js";
import "./chunk-HVAOWOGC.js";
import "./chunk-6NPJZOPM.js";
import "./chunk-MNR4BIGQ.js";
import "./chunk-FVR25IMN.js";
import "./chunk-IHCIS6PT.js";
import "./chunk-OHH3UAUS.js";
import "./chunk-EIQYIBNS.js";
import "./chunk-2NTQWEQZ.js";
import "./chunk-QZ6WR57P.js";
import "./chunk-E2PV5YTZ.js";
import "./chunk-GLVTFP5O.js";
import {
  t
} from "./chunk-YGUWDSEH.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-2TWR6EVF.js";
import "./chunk-MIHY6FSC.js";
import "./chunk-IR32DXLL.js";
import "./chunk-7BMUKKBX.js";
import "./chunk-WIQR3T32.js";
import "./chunk-C2EHS6UI.js";
import "./chunk-HKUQGT3G.js";
import "./chunk-LTYDGBC5.js";
import "./chunk-XR4HIGQP.js";
import "./chunk-H2WAWDF5.js";
import "./chunk-LG2ZH3JE.js";
import "./chunk-DKJBDKGA.js";
import "./chunk-4CZO65BK.js";
import "./chunk-DR3XNW4L.js";
import "./chunk-DKCDRJ5N.js";
import "./chunk-PCTUO7WS.js";
import "./chunk-BS4MX2AF.js";
import "./chunk-R47DHBCM.js";
import "./chunk-KGA7WAD3.js";
import {
  a as a2
} from "./chunk-ZEMUATMN.js";
import "./chunk-RG2YRACH.js";
import "./chunk-ZUBHLDU6.js";
import "./chunk-C3PCK5WU.js";
import "./chunk-HE256ZWN.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-PZXYASUU.js";
import "./chunk-VYGC2LVC.js";
import "./chunk-VHPS7AS5.js";
import "./chunk-GH3XG2RA.js";
import "./chunk-3ESTI2X4.js";
import "./chunk-YK2WEG7V.js";
import "./chunk-5EXFDBQJ.js";
import "./chunk-GVQH342Z.js";
import "./chunk-POEWD5LS.js";
import "./chunk-HTVQN75V.js";
import "./chunk-W3WHCGIQ.js";
import {
  h,
  l,
  w
} from "./chunk-HPWZ2OON.js";
import {
  h as h2
} from "./chunk-WAPUHORU.js";
import "./chunk-HXDFHMRK.js";
import "./chunk-5HSVWQOA.js";
import "./chunk-C2BBLDPU.js";
import "./chunk-GWA3PLGA.js";
import "./chunk-FXWSVUF2.js";
import "./chunk-CNS4YGGN.js";
import "./chunk-DOQ3SAAR.js";
import {
  Ae,
  b as b2,
  g
} from "./chunk-UHAU5IXU.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-CEXY22SC.js";
import "./chunk-ODFH3BSN.js";
import {
  s as s3
} from "./chunk-7JNPZC53.js";
import "./chunk-ZXXKE5XP.js";
import "./chunk-MATER45R.js";
import "./chunk-6UW2VZVV.js";
import {
  V
} from "./chunk-GAARA5JM.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-F42HXUMI.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-UNJDKTFU.js";
import "./chunk-DH42JQZX.js";
import "./chunk-674HAVOZ.js";
import "./chunk-MHGDFNBE.js";
import {
  n as n2
} from "./chunk-J2V5CZSS.js";
import {
  m as m2
} from "./chunk-7D57YBLP.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import {
  m,
  y
} from "./chunk-453UIKKW.js";
import {
  a2 as a
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import {
  n
} from "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import {
  C,
  P,
  d,
  e as e2
} from "./chunk-UYRCWUYQ.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import {
  N
} from "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/views/3d/layers/BuildingSublayerView3D.js
var l3 = (l5, n7) => {
  let u = class extends m2(a2(s3(n2.EventedMixin(l5)))) {
    constructor(e3) {
      super(e3), this.sublayer = null, this.parent = null, this.view = null;
    }
    initialize() {
    }
    get suspended() {
      return !this.canResume();
    }
    get updating() {
      return !this.suspended && this.isUpdating();
    }
    get visible() {
      var _a;
      return !!((_a = this.sublayer) == null ? void 0 : _a.visible);
    }
    set visible(e3) {
      this._overrideIfSome("visible", e3);
    }
    get fullOpacity() {
      const e3 = (e4) => null != e4 ? e4 : 1;
      return e3(this.get("sublayer.opacity")) * e3(this.get("parent.fullOpacity"));
    }
    canResume() {
      var _a, _b;
      return !((_a = this.parent) == null ? void 0 : _a.suspended) && ((_b = this.view) == null ? void 0 : _b.ready) && this.visible || false;
    }
    isUpdating() {
      return false;
    }
  };
  return e([y()], u.prototype, "sublayer", void 0), e([y()], u.prototype, "parent", void 0), e([y({ readOnly: true })], u.prototype, "suspended", null), e([y({ type: Boolean, readOnly: true })], u.prototype, "updating", null), e([y()], u.prototype, "view", void 0), e([y()], u.prototype, "visible", null), e([y()], u.prototype, "fullOpacity", null), u = e([a("esri.views.3d.layers.BuildingSublayerView3D")], u), u;
};

// node_modules/@arcgis/core/views/3d/layers/i3s/BuildingFilterUtil.js
var o2;
!function(e3) {
  e3[e3.Solid = 0] = "Solid", e3[e3.WireFrame = 1] = "WireFrame", e3[e3.XRay = 2] = "XRay";
}(o2 || (o2 = {}));
var l4 = 0.15;
var t5 = 0.5 * l4;
function i(e3) {
  switch (e3.filterMode.type) {
    case "solid":
      return { mode: o2.Solid };
    case "wire-frame":
      return { mode: o2.WireFrame, edgeMaterial: a3(e3.filterMode.edges, {}) };
    case "x-ray":
      return { mode: o2.XRay };
  }
}
function c2(e3, r) {
  if (null == r)
    return e3.color[3] = 0, e3.edgeMaterial = null, void (e3.pickable = false);
  switch (r.mode) {
    case o2.Solid:
      return;
    case o2.WireFrame:
      return e3.color[3] = 0, e3.edgeMaterial = r.edgeMaterial, void (e3.pickable = false);
    case o2.XRay:
      return e3.color[0] = 1, e3.color[1] = 1, e3.color[2] = 1, e3.color[3] *= l4, e3.colorMixMode = n3.Replace, e3.castShadows = false, e3.pickable = false, void (e3.edgeMaterial = n6(e3.edgeMaterial));
  }
}
function n6(e3) {
  return null == e3 ? null : (s4.lastMaterial !== e3 && (s4.cachedMaterial = d5(e3), s4.lastMaterial = e3), s4.cachedMaterial);
}
function d5(r) {
  const a4 = t(r.color);
  return a4[3] *= t5, { ...r, color: a4 };
}
var s4 = { cachedMaterial: null, lastMaterial: null };

// node_modules/@arcgis/core/views/layers/BuildingComponentSublayerView.js
var o3 = class extends m {
  constructor() {
    super(...arguments), this.sublayer = null;
  }
  get updating() {
    return false;
  }
  get suspended() {
    return false;
  }
  get availableFields() {
    return [];
  }
  get filter() {
    return null;
  }
  set filter(r) {
    throw new Error("Not implemented");
  }
  queryFeatures(r, e3) {
    throw new Error("Not implemented");
  }
  queryObjectIds(r, e3) {
    throw new Error("Not implemented");
  }
  queryFeatureCount(r, e3) {
    throw new Error("Not implemented");
  }
  createQuery() {
    throw new Error("Not implemented");
  }
  queryExtent(r, e3) {
    throw new Error("Not implemented");
  }
  highlight(r) {
    throw new Error("Not implemented");
  }
};
e([y()], o3.prototype, "sublayer", void 0), e([y()], o3.prototype, "availableFields", null), e([y()], o3.prototype, "filter", null);

// node_modules/@arcgis/core/views/3d/layers/BuildingComponentSublayerView3D.js
var R = class extends t4(xt(l3(o3))) {
  constructor() {
    super(...arguments), this.type = "building-component-sublayer-3d", this.layerView = null, this._elevationContext = "scene", this._isIntegratedMesh = false, this._supportsLabeling = false, this.requiredFields = [], this.progressiveLoadFactor = 1, this._queryEngine = null;
  }
  get i3slayer() {
    return this.sublayer;
  }
  get layerUid() {
    return this.sublayer.layer.uid;
  }
  get sublayerUid() {
    return this.sublayer.uid;
  }
  get layerId() {
    return this.sublayer.layer.id;
  }
  get sublayerId() {
    return this.sublayer.id;
  }
  get layerPopupEnabledAndHasTemplate() {
    var _a, _b;
    return this.sublayer.popupEnabled && t2(this.sublayer, (_b = (_a = this.layerView) == null ? void 0 : _a.view.popup) == null ? void 0 : _b.defaultPopupTemplateEnabled);
  }
  initialize() {
    this.updatingHandles.add(() => [this.sublayer.renderer, this.definitionExpressionFields, this.filterExpressionFields], () => this._updateRequiredFields()), this.updatingHandles.add(() => this.sublayer.renderer, (e4) => this._rendererChange(e4), h);
    const e3 = () => this._filterChange();
    this.updatingHandles.add(() => this.parsedDefinitionExpression, e3), this.updatingHandles.add(() => null != this._filter ? this._filter.sortedObjectIds : null, e3), this.updatingHandles.add(() => null != this._filter ? this._filter.parsedWhereClause : null, e3), this.updatingHandles.add(() => [null != this._filter ? this._filter.parsedGeometry : null, null != this.filter ? this.filter.spatialRelationship : null], () => this._geometryFilterChange()), this.updatingHandles.add(() => this.parsedFilterExpressions, () => this._updateSymbologyOverride(), h), this.addResolvingPromise(this._updateRequiredFields());
  }
  get lodFactor() {
    return this.view.qualitySettings.sceneService.object.lodFactor;
  }
  get parsedFilterExpressions() {
    return "Overview" !== this.sublayer.modelName && this.layerView ? this.layerView.filterExpressions.map(([e3, r]) => {
      let t6;
      try {
        t6 = f.create(e3, this.sublayer.fieldsIndex);
      } catch (n7) {
        return s.getLogger(this).error("Failed to parse filterExpression: " + n7), null;
      }
      if (!t6.isStandardized)
        return s.getLogger(this).error("filterExpression is using non standard function"), null;
      const s6 = [], l5 = t6.fieldNames;
      return re(l5, this.sublayer.fields, { missingFields: s6 }), s6.length > 0 ? (s.getLogger(this).error(`filterExpression references unknown fields: ${s6.join(", ")}`), null) : [t6, r];
    }).filter((e3) => null != e3) : [];
  }
  get filter() {
    return null != this._filter ? this._filter.viewFilter : null;
  }
  set filter(e3) {
    null != e3 && L.checkSupport(e3) ? null != this._filter ? this._filter.viewFilter = e3 : this._filter = new L({ viewFilter: e3, layerFieldsIndex: this.sublayer.fieldsIndex, loadAsyncModule: (e4) => this._loadAsyncModule(e4), addSqlFilter: (e4, r) => this.addSqlFilter(e4, r, this.logError) }) : this._filter = null;
  }
  isUpdating() {
    return super.isUpdating() || null != this._filter && this._filter.updating;
  }
  _updateSymbologyOverride() {
    const e3 = this.parsedFilterExpressions;
    e3.length > 0 ? this._setSymbologyOverride((r, t6) => {
      for (const [s6, l5] of e3)
        try {
          if (s6.testFeature(r))
            return c2(t6, l5);
        } catch (i2) {
          this.logError(i2);
        }
      return c2(t6, null);
    }, this.filterExpressionFields) : this._setSymbologyOverride(null, null);
  }
  get filterExpressionFields() {
    return g(this.sublayer.fieldsIndex, this.parsedFilterExpressions.reduce((e3, [r]) => e3.concat(r.fieldNames), new Array()));
  }
  get availableFields() {
    const e3 = this.sublayer, r = e3.fieldsIndex;
    let t6 = this.requiredFields;
    if (e3.outFields || e3.layer.outFields) {
      const i2 = [...e3.outFields || [], ...e3.layer.outFields || []];
      t6 = [...b2(r, i2), ...t6];
    }
    return g(r, t6);
  }
  _createLayerGraphic(e3) {
    const t6 = new h2(null, null, e3);
    return t6.layer = this.sublayer.layer, t6.sourceLayer = this.sublayer, t6;
  }
  canResume() {
    return super.canResume() && (!this._controller || this._controller.rootNodeVisible);
  }
  async fetchPopupFeatures(e3, r) {
    const t6 = this._validateFetchPopupFeatures(r);
    if (t6)
      throw t6;
    if (null == r || !r.clientGraphics || 0 === r.clientGraphics.length)
      return [];
    const s6 = [], l5 = [], n7 = null != this.sublayer.associatedLayer ? await this.sublayer.associatedLayer.load() : this.sublayer, a4 = b2(this.sublayer.fieldsIndex, await n4(n7, p(this.sublayer, r))), o4 = /* @__PURE__ */ new Set();
    for (const i2 of r.clientGraphics)
      Ae(a4, i2, o4) ? l5.push(i2) : s6.push(i2);
    return 0 === l5.length ? s6 : (null != this.sublayer.associatedLayer && await this.sublayer.associatedLayer.load().catch(() => s.getLogger(this).warn("Failed to load associated feature layer. Displaying popup attributes from cached attributes.")), this.whenGraphicAttributes(l5, Array.from(o4)).catch(() => l5).then((e4) => s6.concat(e4)));
  }
  async _updateRequiredFields() {
    const e3 = g(this.sublayer.fieldsIndex, [...this.sublayer.renderer ? await this.sublayer.renderer.getRequiredFields(this.sublayer.fieldsIndex) : [], ...this.definitionExpressionFields || [], ...this.filterExpressionFields || []]);
    this._set("requiredFields", e3);
  }
  _validateFetchPopupFeatures(e3) {
    const { sublayer: r } = this, { popupEnabled: i2 } = r;
    return i2 ? p(r, e3) ? void 0 : new s2("buildingscenelayerview3d:fetchPopupFeatures", "Layer does not define a popup template", { sublayer: r }) : new s2("buildingscenelayerview3d:fetchPopupFeatures", "Popups are disabled", { sublayer: r });
  }
  getFilters() {
    const e3 = super.getFilters();
    return this.addSqlFilter(e3, this.parsedDefinitionExpression, this.logError), null != this._filter && this._filter.addFilters(e3, this.view, this._controller.crsIndex, this._collection), e3;
  }
  createQuery() {
    const e3 = { outFields: ["*"], returnGeometry: false, outSpatialReference: this.view.spatialReference };
    return null != this.filter ? this.filter.createQuery(e3) : new b(e3);
  }
  queryExtent(e3, r) {
    return this._ensureQueryEngine().executeQueryForExtent(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  queryFeatureCount(e3, r) {
    return this._ensureQueryEngine().executeQueryForCount(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  queryFeatures(e3, r) {
    return this._ensureQueryEngine().executeQuery(this._ensureQuery(e3), r == null ? void 0 : r.signal).then((e4) => {
      if (!(e4 == null ? void 0 : e4.features))
        return e4;
      const r2 = this.sublayer, t6 = r2.layer;
      for (const i2 of e4.features)
        i2.layer = t6, i2.sourceLayer = r2;
      return e4;
    });
  }
  queryObjectIds(e3, r) {
    return this._ensureQueryEngine().executeQueryForIds(this._ensureQuery(e3), r == null ? void 0 : r.signal);
  }
  _ensureQueryEngine() {
    return null == this._queryEngine && (this._queryEngine = this._createQueryEngine()), this._queryEngine;
  }
  _createQueryEngine() {
    const e3 = c(this.view.spatialReference, this.view.renderSpatialReference, this._collection);
    return new d4({ layerView: this, priority: I.FEATURE_QUERY_ENGINE, spatialIndex: new l2({ featureAdapter: new o({ objectIdField: this.sublayer.objectIdField, attributeStorageInfo: this.sublayer.attributeStorageInfo, getFeatureExtent: e3 }), forAllFeatures: (e4, r) => this._forAllFeatures((r2, t6, i2) => e4({ id: r2, index: t6, meta: i2 }), r, E.QUERYABLE), getFeatureExtent: e3, sourceSpatialReference: pe(this.sublayer), viewSpatialReference: this.view.spatialReference }) });
  }
  _ensureQuery(e3) {
    return this._addDefinitionExpressionToQuery(null == e3 ? this.createQuery() : b.from(e3));
  }
};
e([y()], R.prototype, "i3slayer", null), e([y()], R.prototype, "layerView", void 0), e([y()], R.prototype, "lodFactor", null), e([y({ readOnly: true })], R.prototype, "parsedFilterExpressions", null), e([y({ type: d2 })], R.prototype, "filter", null), e([y()], R.prototype, "_filter", void 0), e([y({ type: [String], readOnly: true })], R.prototype, "filterExpressionFields", null), e([y({ type: [String], readOnly: true })], R.prototype, "requiredFields", void 0), e([y({ type: [String], readOnly: true })], R.prototype, "availableFields", null), R = e([a("esri.views.3d.layers.BuildingComponentSublayerView3D")], R);
var L2 = R;

// node_modules/@arcgis/core/views/layers/BuildingSceneLayerView.js
var s5 = class extends d3 {
  constructor(r) {
    super(r), this.layer = null, this.sublayerViews = null;
  }
  highlight(r) {
    throw new Error("Not implemented");
  }
};
e([y()], s5.prototype, "layer", void 0), e([y()], s5.prototype, "sublayerViews", void 0);

// node_modules/@arcgis/core/views/3d/layers/BuildingSceneLayerView3D.js
var _ = l3(m);
var C2 = class extends n5(s5) {
  constructor(e3) {
    super(e3), this.type = "building-scene-3d", this.sublayerViews = new V(), this._abortController = new AbortController(), this._loadingComponents = 0, this._pendingWhenSublayerViews = /* @__PURE__ */ new Map(), this.ignoresMemoryFactor = false;
  }
  get filterExpression() {
    var _a;
    const e3 = this.layer.activeFilterId, r = null != e3 ? this.layer.filters.find((r2) => r2.id === e3) : null, s6 = null != r ? (_a = r.filterBlocks) == null ? void 0 : _a.find((e4) => "solid" === e4.filterMode.type) : null;
    return s6 ? s6.filterExpression : null;
  }
  get filterExpressions() {
    const e3 = this.layer.activeFilterId, r = null != e3 ? this.layer.filters.find((r2) => r2.id === e3) : null;
    return r && r.filterBlocks ? r.filterBlocks.toArray().map((e4) => [e4.filterExpression ?? "", i(e4)]) : [];
  }
  get updatingProgressValue() {
    const e3 = this.sublayerViews, r = this._loadingComponents + (e3 ? e3.length : 0);
    return e3.reduce((e4, r2) => e4 + r2.updatingProgress, 0) / r;
  }
  isUpdating() {
    return this._loadingComponents > 0 || this.sublayerViews && this.sublayerViews.some((e3) => e3.updating);
  }
  initialize() {
    de(this.layer.spatialReference, this.view.spatialReference, this.view.viewingMode), this._initializeSubLayerViews(this.layer.sublayers, this);
  }
  destroy() {
    this.sublayerViews && (this.sublayerViews.forEach((e3) => e3.destroy()), this.sublayerViews = null), this._abortController = e2(this._abortController);
  }
  _initializeSubLayerViews(e3, r) {
    const s6 = this, t6 = this.view;
    e3.forEach((e4) => {
      if (!e4.isEmpty)
        if ("building-group" === e4.type) {
          const s7 = new _({ sublayer: e4, view: t6, parent: r });
          this._initializeSubLayerViews(e4.sublayers, s7);
        } else
          "mesh" === e4.geometryType && (this._loadingComponents++, e4.load({ signal: this._abortController.signal }).then(() => {
            const i2 = new L2({ sublayer: e4, layerView: s6, view: t6, parent: r });
            this.sublayerViews.push(i2);
            const o4 = this._pendingWhenSublayerViews.get(e4);
            if (o4) {
              for (const e5 of o4)
                e5.resolve(i2);
              this._pendingWhenSublayerViews.delete(e4);
            }
            this.handles.add([l(() => i2.updating, () => this.notifyChange("updating"), w), l(() => i2.updatingProgress, () => this.notifyChange("updatingProgressValue"), w)]);
          }).catch((r2) => {
            d(r2) || s.getLogger(this).error(`Error while creating view for sublayer ${e4.id}
Layer: ${this.layer.url}
`, r2);
          }).then(() => {
            this._loadingComponents--, this.notifyChange("updating"), this.notifyChange("updatingProgressValue");
          }));
    });
  }
  getGraphicFromIntersectorTarget(e3) {
    for (const r of this.sublayerViews.items)
      if (r.sublayer.uid === e3.sublayerUid)
        return r.getGraphicFromIntersectorTarget(e3);
    return null;
  }
  async fetchPopupFeatures(e3, r) {
    if (null == r || !r.clientGraphics || 0 === r.clientGraphics.length)
      return [];
    const s6 = N(r.clientGraphics, (e4) => e4.sourceLayer), i2 = [];
    for (const [t6, o4] of s6) {
      const s7 = this._findComponent(t6);
      null != s7 && i2.push(s7.fetchPopupFeatures(e3, { ...r, clientGraphics: o4 }));
    }
    return P(i2).then((e4) => e4.flat());
  }
  whenGraphicBounds(e3) {
    const r = this._findComponent(e3.sourceLayer);
    return null == r ? Promise.reject() : r.whenGraphicBounds(e3);
  }
  getAABBFromIntersectorTarget(e3) {
    for (const r of this.sublayerViews.items)
      if (r.sublayer.uid === e3.sublayerUid)
        return r.getAABBFromIntersectorTarget(e3);
    return null;
  }
  async whenSublayerView(e3) {
    const r = this._findComponent(e3);
    if (null != r)
      return r;
    const s6 = this._pendingWhenSublayerViews.get(e3), t6 = C();
    return s6 ? s6.push(t6) : this._pendingWhenSublayerViews.set(e3, [t6]), t6.promise;
  }
  _findComponent(e3) {
    return this.sublayerViews.find((r) => e3 === r.sublayer);
  }
  highlight(e3) {
    e3 instanceof h2 ? e3 = [e3] : e3 instanceof V && (e3 = e3.toArray());
    const s6 = [];
    if (Array.isArray(e3) && e3.length > 0 && e3[0] instanceof h2) {
      const r = e3, t6 = /* @__PURE__ */ new Map();
      for (const e4 of r) {
        let r2 = t6.get(e4.sourceLayer);
        null == r2 && (r2 = [], t6.set(e4.sourceLayer, r2)), r2.push(e4);
      }
      this.sublayerViews.forEach((e4) => {
        const r2 = t6.get(e4.sublayer);
        r2 && s6.push(e4.highlight(r2));
      });
    }
    return n(s6);
  }
  get usedMemory() {
    return this.sublayerViews.reduce((e3, r) => e3 + r.usedMemory, 0);
  }
  get unloadedMemory() {
    return this.sublayerViews.reduce((e3, r) => e3 + r.unloadedMemory, 0);
  }
};
e([y()], C2.prototype, "sublayerViews", void 0), e([y({ readOnly: true })], C2.prototype, "filterExpression", null), e([y({ readOnly: true })], C2.prototype, "filterExpressions", null), e([y(t3)], C2.prototype, "updatingProgress", void 0), e([y({ readOnly: true, dependsOn: [] })], C2.prototype, "updatingProgressValue", null), C2 = e([a("esri.views.3d.layers.BuildingSceneLayerView3D")], C2);
var S = C2;
export {
  S as default
};
//# sourceMappingURL=BuildingSceneLayerView3D-TLOZE2DK.js.map
