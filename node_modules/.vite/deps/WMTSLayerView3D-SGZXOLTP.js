import {
  o
} from "./chunk-6WMPCNUB.js";
import {
  a as a2
} from "./chunk-UVYXRE2S.js";
import {
  n
} from "./chunk-GD75B7SP.js";
import {
  d
} from "./chunk-AGK2CKWJ.js";
import "./chunk-4GKXMRJI.js";
import "./chunk-HKJ2JMCX.js";
import "./chunk-644IM3NW.js";
import "./chunk-KWPMDFFW.js";
import "./chunk-MNDNZJD5.js";
import "./chunk-LVVQ2RQY.js";
import "./chunk-CUZNACFZ.js";
import "./chunk-ZHUFARKQ.js";
import "./chunk-4RU6WIRN.js";
import "./chunk-JPAY3V43.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-RVS5HU2K.js";
import "./chunk-SS3YG6J3.js";
import "./chunk-6NPJZOPM.js";
import "./chunk-YGUWDSEH.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-2TWR6EVF.js";
import {
  v
} from "./chunk-DKCDRJ5N.js";
import "./chunk-ZEMUATMN.js";
import "./chunk-RG2YRACH.js";
import "./chunk-7EG7BYWF.js";
import "./chunk-W3WHCGIQ.js";
import {
  j
} from "./chunk-HPWZ2OON.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-7JNPZC53.js";
import {
  V
} from "./chunk-GAARA5JM.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import {
  y
} from "./chunk-453UIKKW.js";
import {
  a2 as a
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import "./chunk-UYRCWUYQ.js";
import {
  s2 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/views/3d/layers/WMTSLayerView3D.js
var c = class extends a2(o(n(d))) {
  constructor() {
    super(...arguments), this.type = "wmts-3d";
  }
  initialize() {
    this._getCompatibleTileInfoMatrixSet((e3) => this._getTileInfoSupportError(e3.tileInfo, e3.fullExtent));
    const e2 = j(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
    }).then(() => {
      const e3 = this._getCompatibleTileInfoMatrixSet((e4) => this._getTileInfoError(e4.tileInfo, e4.fullExtent));
      null != e3 && (null !== e3.id && this.layer.activeLayer.tileMatrixSetId !== e3.id && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3.tileInfo && (this.tileInfo = e3.tileInfo), this.layer.fullExtent = e3.fullExtent);
    });
    this.addResolvingPromise(e2), this.when(() => this._postInitialize());
  }
  get hasMixedImageFormats() {
    return true;
  }
  refresh() {
    this.emit("data-changed");
  }
  canResume() {
    if (!super.canResume())
      return false;
    const e2 = this.layer.activeLayer.tileMatrixSet;
    return null != e2 && !this._getTileInfoError(e2.tileInfo, e2.fullExtent);
  }
  async doRefresh() {
    this.suspended || this.emit("data-changed");
  }
  _postInitialize() {
    this.updatingHandles.add(() => {
      var _a, _b;
      return (_b = (_a = this.layer) == null ? void 0 : _a.activeLayer) == null ? void 0 : _b.styleId;
    }, () => this.refresh()), this.updatingHandles.add(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.activeLayer;
    }, (e2) => {
      const t = this._getCompatibleTileInfoMatrixSet((e3) => this._getTileInfoError(e3.tileInfo, e3.fullExtent), true);
      null != t && null !== t.id && e2.tileMatrixSetId !== t.id && (this.layer.activeLayer.tileMatrixSetId = t.id), this.notifyChange("suspended"), this.canResume() && this.refresh();
    });
  }
  _getCompatibleTileInfoMatrixSet(e2, r = false) {
    const s2 = v(this.layer);
    if (null != s2) {
      if (V.isCollection(s2)) {
        const t = s2.find((t2) => {
          const s3 = e2(t2);
          return null != s3 && (r ? s.getLogger(this).error("The selected tile matrix set is not compatible with the view", s3) : this.addResolvingPromise(Promise.reject(s3))), null == s3;
        });
        return t;
      }
      const o2 = e2(s2);
      return null != o2 && (r ? s.getLogger(this).error("The selected tile matrix set is not compatible with the view", o2) : this.addResolvingPromise(Promise.reject(o2))), s2;
    }
    return null;
  }
  _getTileInfoError(e2, t) {
    return this._getTileInfoSupportError(e2, t) || this._getTileInfoCompatibilityError(e2, this.view.basemapTerrain.tilingScheme);
  }
};
e([y({ readOnly: true })], c.prototype, "hasMixedImageFormats", null), e([y()], c.prototype, "layer", void 0), e([y()], c.prototype, "suspended", void 0), e([y()], c.prototype, "tileInfo", void 0), c = e([a("esri.views.3d.layers.WMTSLayerView3d")], c);
var d2 = c;
export {
  d2 as default
};
//# sourceMappingURL=WMTSLayerView3D-SGZXOLTP.js.map
