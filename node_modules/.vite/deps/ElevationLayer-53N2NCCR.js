import {
  p
} from "./chunk-H4USJG7A.js";
import "./chunk-A5HE5G4C.js";
import "./chunk-VDT2UHLV.js";
import {
  a as a2,
  s as s3
} from "./chunk-HMCRDYLX.js";
import "./chunk-WT7BDUIR.js";
import "./chunk-JPAY3V43.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-WWUAHPIM.js";
import {
  l
} from "./chunk-FN34IFMV.js";
import {
  j as j2
} from "./chunk-QO446QEK.js";
import "./chunk-4FZRA4VI.js";
import {
  c
} from "./chunk-G32FVJ4L.js";
import {
  O
} from "./chunk-XJXVKVA7.js";
import {
  f as f3
} from "./chunk-HVAOWOGC.js";
import {
  v as v2
} from "./chunk-6NPJZOPM.js";
import "./chunk-MNR4BIGQ.js";
import "./chunk-IHCIS6PT.js";
import "./chunk-OHH3UAUS.js";
import "./chunk-E2PV5YTZ.js";
import "./chunk-GLVTFP5O.js";
import "./chunk-2NXAWKLI.js";
import "./chunk-AUKNAK3D.js";
import "./chunk-2TWR6EVF.js";
import "./chunk-IR32DXLL.js";
import "./chunk-DR3XNW4L.js";
import "./chunk-DKCDRJ5N.js";
import "./chunk-PCTUO7WS.js";
import "./chunk-KGA7WAD3.js";
import "./chunk-C3PCK5WU.js";
import "./chunk-HE256ZWN.js";
import "./chunk-7EG7BYWF.js";
import {
  b
} from "./chunk-PZXYASUU.js";
import "./chunk-POEWD5LS.js";
import "./chunk-HTVQN75V.js";
import "./chunk-W3WHCGIQ.js";
import "./chunk-HPWZ2OON.js";
import "./chunk-UHAU5IXU.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-CEXY22SC.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7JNPZC53.js";
import "./chunk-6UW2VZVV.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-UNJDKTFU.js";
import "./chunk-DH42JQZX.js";
import "./chunk-674HAVOZ.js";
import "./chunk-MHGDFNBE.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-JZM5YUHA.js";
import {
  j
} from "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import {
  v
} from "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import {
  o
} from "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import {
  y
} from "./chunk-453UIKKW.js";
import {
  a2 as a
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import {
  f,
  f2,
  s2
} from "./chunk-UYRCWUYQ.js";
import {
  s3 as s
} from "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/layers/ElevationLayer.js
var S = class extends p(l(c(j2(O(b))))) {
  constructor(...e2) {
    super(...e2), this.capabilities = { operations: { supportsTileMap: false } }, this.copyright = null, this.heightModelInfo = null, this.path = null, this.minScale = void 0, this.maxScale = void 0, this.opacity = 1, this.operationalLayerType = "ArcGISTiledElevationServiceLayer", this.sourceJSON = null, this.type = "elevation", this.url = null, this.version = null, this._lercDecoder = s3();
  }
  normalizeCtorArgs(e2, r) {
    return "string" == typeof e2 ? { url: e2, ...r } : e2;
  }
  destroy() {
    this._lercDecoder = f(this._lercDecoder);
  }
  readCapabilities(e2, r) {
    const t = r.capabilities && r.capabilities.split(",").map((e3) => e3.toLowerCase().trim());
    if (!t)
      return { operations: { supportsTileMap: false } };
    return { operations: { supportsTileMap: t.includes("tilemap") } };
  }
  readVersion(e2, r) {
    let t = r.currentVersion;
    return t || (t = 9.3), t;
  }
  load(e2) {
    const r = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Image Service"], supportsData: false, validateItem: (e3) => {
      for (let r2 = 0; r2 < e3.typeKeywords.length; r2++)
        if ("elevation 3d layer" === e3.typeKeywords[r2].toLowerCase())
          return true;
      throw new s("portal:invalid-layer-item-type", "Invalid layer item type '${type}', expected '${expectedType}' ", { type: "Image Service", expectedType: "Image Service Elevation 3D Layer" });
    } }, e2).catch(f2).then(() => this._fetchImageService(r))), Promise.resolve(this);
  }
  fetchTile(e2, t, i, o2) {
    const s4 = null != (o2 = o2 || { signal: null }).signal ? o2.signal : o2.signal = new AbortController().signal, a3 = { responseType: "array-buffer", signal: s4 }, p2 = { noDataValue: o2.noDataValue, returnFileInfo: true };
    return this.load().then(() => this._fetchTileAvailability(e2, t, i, o2)).then(() => j(this.getTileUrl(e2, t, i), a3)).then((e3) => this._lercDecoder.decode(e3.data, p2, s4)).then((e3) => new a2(e3));
  }
  getTileUrl(e2, r, t) {
    const i = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, o2 = v({ ...this.parsedUrl.query, blankTile: !i && null });
    return `${this.parsedUrl.path}/tile/${e2}/${r}/${t}${o2 ? "?" + o2 : ""}`;
  }
  async queryElevation(e2, r) {
    const { ElevationQuery: t } = await import("./ElevationQuery-F3TWL45Y.js");
    s2(r);
    return new t().query(this, e2, r);
  }
  async createElevationSampler(e2, r) {
    const { ElevationQuery: t } = await import("./ElevationQuery-F3TWL45Y.js");
    s2(r);
    return new t().createSampler(this, e2, r);
  }
  _fetchTileAvailability(e2, r, t, i) {
    return this.tilemapCache ? this.tilemapCache.fetchAvailability(e2, r, t, i) : Promise.resolve("unknown");
  }
  async _fetchImageService(e2) {
    var _a;
    if (this.sourceJSON)
      return this.sourceJSON;
    const t = { query: { f: "json", ...this.parsedUrl.query }, responseType: "json", signal: e2 }, i = await j(this.parsedUrl.path, t);
    i.ssl && (this.url = (_a = this.url) == null ? void 0 : _a.replace(/^http:/i, "https:")), this.sourceJSON = i.data, this.read(i.data, { origin: "service", url: this.parsedUrl });
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[w];
  }
};
e([y({ readOnly: true })], S.prototype, "capabilities", void 0), e([o("service", "capabilities", ["capabilities"])], S.prototype, "readCapabilities", null), e([y({ json: { read: { source: "copyrightText" } } })], S.prototype, "copyright", void 0), e([y({ readOnly: true, type: v2 })], S.prototype, "heightModelInfo", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], S.prototype, "path", void 0), e([y({ type: ["show", "hide"] })], S.prototype, "listMode", void 0), e([y({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], S.prototype, "minScale", void 0), e([y({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], S.prototype, "maxScale", void 0), e([y({ json: { read: false, write: false, origins: { "web-document": { read: false, write: false } } } })], S.prototype, "opacity", void 0), e([y({ type: ["ArcGISTiledElevationServiceLayer"] })], S.prototype, "operationalLayerType", void 0), e([y()], S.prototype, "sourceJSON", void 0), e([y({ json: { read: false }, value: "elevation", readOnly: true })], S.prototype, "type", void 0), e([y(f3)], S.prototype, "url", void 0), e([y()], S.prototype, "version", void 0), e([o("version", ["currentVersion"])], S.prototype, "readVersion", null), S = e([a("esri.layers.ElevationLayer")], S);
var w = Symbol("default-fetch-tile");
S.prototype.fetchTile[w] = true;
var T = S;
export {
  T as default
};
//# sourceMappingURL=ElevationLayer-53N2NCCR.js.map
