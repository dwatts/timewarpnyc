import {
  t
} from "./chunk-B5TYSRH2.js";
import {
  d as d2
} from "./chunk-MR3XQOHR.js";
import {
  d
} from "./chunk-PYQNXC2L.js";
import "./chunk-GNESNC4Q.js";
import "./chunk-WIQR3T32.js";
import "./chunk-C2EHS6UI.js";
import {
  f
} from "./chunk-YK2WEG7V.js";
import "./chunk-WAPUHORU.js";
import "./chunk-HXDFHMRK.js";
import "./chunk-5HSVWQOA.js";
import "./chunk-C2BBLDPU.js";
import "./chunk-GWA3PLGA.js";
import "./chunk-FXWSVUF2.js";
import "./chunk-CNS4YGGN.js";
import "./chunk-DOQ3SAAR.js";
import "./chunk-UHAU5IXU.js";
import "./chunk-3U2FS2TT.js";
import "./chunk-CEXY22SC.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-7JNPZC53.js";
import "./chunk-ZXXKE5XP.js";
import "./chunk-MATER45R.js";
import "./chunk-6UW2VZVV.js";
import "./chunk-GAARA5JM.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EHNCW2SL.js";
import "./chunk-HIPTG7BJ.js";
import "./chunk-REPJV7SP.js";
import "./chunk-F42HXUMI.js";
import "./chunk-BAMKEIAF.js";
import "./chunk-CZNLCEZN.js";
import "./chunk-UNJDKTFU.js";
import "./chunk-DH42JQZX.js";
import "./chunk-674HAVOZ.js";
import "./chunk-MHGDFNBE.js";
import "./chunk-J2V5CZSS.js";
import "./chunk-7D57YBLP.js";
import "./chunk-JZM5YUHA.js";
import {
  j
} from "./chunk-ZF5PVI2P.js";
import "./chunk-EQK73KLU.js";
import "./chunk-OBGBLQQX.js";
import "./chunk-FXYPEAR7.js";
import "./chunk-V3CNLYUD.js";
import "./chunk-TEHNQYQD.js";
import "./chunk-TPJLFGOT.js";
import "./chunk-CQX57DED.js";
import "./chunk-3CQBBMMD.js";
import "./chunk-T35GN7EL.js";
import "./chunk-7U6V6KY2.js";
import "./chunk-NFY4EX6G.js";
import "./chunk-GJ7PJ7XG.js";
import "./chunk-ULGEYK3G.js";
import "./chunk-F3KGLZDZ.js";
import "./chunk-CHTUPHTO.js";
import "./chunk-453UIKKW.js";
import "./chunk-5BLDWPLW.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-7G6CKDLW.js";
import "./chunk-FFUMVAL2.js";
import "./chunk-3JQ6N63Z.js";
import "./chunk-U3J7253Q.js";
import "./chunk-FWH3QSBQ.js";
import "./chunk-2UENN434.js";
import "./chunk-UYRCWUYQ.js";
import "./chunk-HMVAPW5X.js";
import "./chunk-IYZKKFJM.js";
import "./chunk-JZJWZ6DN.js";
import "./chunk-6TJCVOLN.js";

// node_modules/@arcgis/core/rest/query/operations/queryRelatedRecords.js
function o(e, t2) {
  const o2 = e.toJSON();
  return o2.objectIds && (o2.objectIds = o2.objectIds.join(",")), o2.orderByFields && (o2.orderByFields = o2.orderByFields.join(",")), o2.outFields && !(t2 == null ? void 0 : t2.returnCountOnly) ? o2.outFields.includes("*") ? o2.outFields = "*" : o2.outFields = o2.outFields.join(",") : delete o2.outFields, o2.outSpatialReference && (o2.outSR = o2.outSR.wkid || JSON.stringify(o2.outSR.toJSON()), delete o2.outSpatialReference), o2.dynamicDataSource && (o2.layer = JSON.stringify({ source: o2.dynamicDataSource }), delete o2.dynamicDataSource), o2;
}
async function r(e, t2, o2) {
  const r2 = await n(e, t2, o2), s2 = r2.data, a = s2.geometryType, d3 = s2.spatialReference, c = {};
  for (const n3 of s2.relatedRecordGroups) {
    const e2 = { fields: void 0, objectIdFieldName: void 0, geometryType: a, spatialReference: d3, hasZ: !!s2.hasZ, hasM: !!s2.hasM, features: n3.relatedRecords };
    if (null != n3.objectId)
      c[n3.objectId] = e2;
    else
      for (const t3 of Object.keys(n3))
        "relatedRecords" !== t3 && (c[n3[t3]] = e2);
  }
  return { ...r2, data: c };
}
async function s(e, t2, o2) {
  const r2 = await n(e, t2, o2, { returnCountOnly: true }), s2 = r2.data, a = {};
  for (const n3 of s2.relatedRecordGroups)
    null != n3.objectId && (a[n3.objectId] = n3.count);
  return { ...r2, data: a };
}
async function n(r2, s2, n3 = {}, a) {
  const d3 = t({ ...r2.query, f: "json", ...a, ...o(s2, a) });
  return j(r2.path + "/queryRelatedRecords", { ...n3, query: { ...n3.query, ...d3 } });
}

// node_modules/@arcgis/core/rest/query/executeRelationshipQuery.js
async function n2(e, n3, u2) {
  n3 = d2.from(n3);
  const a = f(e);
  return r(a, n3, u2).then((t2) => {
    const r2 = t2.data, e2 = {};
    return Object.keys(r2).forEach((t3) => e2[t3] = d.fromJSON(r2[t3])), e2;
  });
}
async function u(r2, o2, n3) {
  o2 = d2.from(o2);
  const u2 = f(r2);
  return s(u2, o2, { ...n3 }).then((t2) => t2.data);
}
export {
  n2 as executeRelationshipQuery,
  u as executeRelationshipQueryForCount
};
//# sourceMappingURL=executeRelationshipQuery-IP3JMRQF.js.map
