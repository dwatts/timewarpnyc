import {
  i
} from "./chunk-GWA3PLGA.js";
import {
  c,
  p
} from "./chunk-3U2FS2TT.js";
import {
  h
} from "./chunk-ZXXKE5XP.js";
import {
  o,
  r
} from "./chunk-NFY4EX6G.js";
import {
  l
} from "./chunk-CHTUPHTO.js";
import {
  y
} from "./chunk-453UIKKW.js";
import {
  a2 as a
} from "./chunk-5BLDWPLW.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  v
} from "./chunk-7G6CKDLW.js";

// node_modules/@arcgis/core/core/imageUtils.js
var t = null;
var n = true;
function e2(t2, e3, r3) {
  if (!t2 || !e3)
    throw new Error("Cannot construct image data without dimensions");
  if (n)
    try {
      return new ImageData(t2, e3);
    } catch (a4) {
      n = false;
    }
  return o2(t2, e3, r3);
}
function r2(t2, e3, r3, a4) {
  if (!e3 || !r3)
    throw new Error("Cannot construct image data without dimensions");
  if (n)
    try {
      return new ImageData(t2, e3, r3);
    } catch (c4) {
      n = false;
    }
  const i2 = o2(e3, r3, a4);
  return i2.data.set(t2, 0), i2;
}
function a2() {
  return t || (t = document.createElement("canvas"), t.width = 1, t.height = 1), t;
}
function o2(t2, n4, e3) {
  return e3 || (e3 = a2()), e3.getContext("2d").createImageData(t2, n4);
}

// node_modules/@arcgis/core/geometry/support/MeshTexture.js
var p2;
var h2 = /* @__PURE__ */ new WeakMap();
var d = 0;
var u = p2 = class extends l {
  constructor(t2) {
    super(t2), this.wrap = "repeat";
  }
  get url() {
    return this._get("url") || null;
  }
  set url(t2) {
    this._set("url", t2), t2 && this._set("data", null);
  }
  get data() {
    return this._get("data") || null;
  }
  set data(t2) {
    this._set("data", t2), t2 && this._set("url", null);
  }
  writeData(t2, e3, a4, r3) {
    if (t2 instanceof HTMLImageElement) {
      const s = { type: "image-element", src: c(t2.src, r3), crossOrigin: t2.crossOrigin };
      e3[a4] = s;
    } else if (t2 instanceof HTMLCanvasElement) {
      const r4 = t2.getContext("2d").getImageData(0, 0, t2.width, t2.height), s = { type: "canvas-element", imageData: this._encodeImageData(r4) };
      e3[a4] = s;
    } else if (t2 instanceof HTMLVideoElement) {
      const s = { type: "video-element", src: c(t2.src, r3), autoplay: t2.autoplay, loop: t2.loop, muted: t2.muted, crossOrigin: t2.crossOrigin, preload: t2.preload };
      e3[a4] = s;
    } else if (t2 instanceof ImageData) {
      const r4 = { type: "image-data", imageData: this._encodeImageData(t2) };
      e3[a4] = r4;
    }
  }
  readData(t2) {
    switch (t2.type) {
      case "image-element": {
        const e3 = new Image();
        return e3.src = t2.src, e3.crossOrigin = t2.crossOrigin, e3;
      }
      case "canvas-element": {
        const e3 = this._decodeImageData(t2.imageData), a4 = document.createElement("canvas");
        return a4.width = e3.width, a4.height = e3.height, a4.getContext("2d").putImageData(e3, 0, 0), a4;
      }
      case "image-data":
        return this._decodeImageData(t2.imageData);
      case "video-element": {
        const e3 = document.createElement("video");
        return e3.src = t2.src, e3.crossOrigin = t2.crossOrigin, e3.autoplay = t2.autoplay, e3.loop = t2.loop, e3.muted = t2.muted, e3.preload = t2.preload, e3;
      }
      default:
        return;
    }
  }
  get transparent() {
    const t2 = this.data, e3 = this.url;
    if (t2 instanceof HTMLCanvasElement)
      return this._imageDataContainsTransparent(t2.getContext("2d").getImageData(0, 0, t2.width, t2.height));
    if (t2 instanceof ImageData)
      return this._imageDataContainsTransparent(t2);
    if (e3) {
      const t3 = e3.substr(e3.length - 4, 4).toLowerCase(), a4 = e3.substr(0, 15).toLocaleLowerCase();
      if (".png" === t3 || "data:image/png;" === a4)
        return true;
    }
    return false;
  }
  set transparent(t2) {
    this._overrideIfSome("transparent", t2);
  }
  get contentHash() {
    const t2 = "string" == typeof this.wrap ? this.wrap : "object" == typeof this.wrap ? `${this.wrap.horizontal}/${this.wrap.vertical}` : "", e3 = (e4 = "") => `d:${e4},t:${this.transparent},w:${t2}`;
    return null != this.url ? e3(this.url) : null != this.data ? this.data instanceof HTMLImageElement || this.data instanceof HTMLVideoElement ? e3(this.data.src) : (h2.has(this.data) || h2.set(this.data, ++d), e3(h2.get(this.data))) : e3();
  }
  get memoryUsage() {
    let t2 = 0;
    if (t2 += null != this.url ? this.url.length : 0, null != this.data) {
      const e3 = this.data;
      "data" in e3 ? t2 += e3.data.byteLength : e3 instanceof HTMLImageElement ? t2 += e3.naturalWidth * e3.naturalHeight * 3 : e3 instanceof HTMLCanvasElement && (t2 += e3.width * e3.height * 3);
    }
    return t2;
  }
  clone() {
    const t2 = { url: this.url, data: this.data, wrap: this._cloneWrap() };
    return new p2(t2);
  }
  cloneWithDeduplication(t2) {
    const e3 = t2.get(this);
    if (e3)
      return e3;
    const a4 = this.clone();
    return t2.set(this, a4), a4;
  }
  _cloneWrap() {
    return "string" == typeof this.wrap ? this.wrap : { horizontal: this.wrap.horizontal, vertical: this.wrap.vertical };
  }
  _encodeImageData(t2) {
    let e3 = "";
    for (let a4 = 0; a4 < t2.data.length; a4++)
      e3 += String.fromCharCode(t2.data[a4]);
    return { data: btoa(e3), width: t2.width, height: t2.height };
  }
  _decodeImageData(t2) {
    const a4 = atob(t2.data), r3 = new Uint8ClampedArray(a4.length);
    for (let e3 = 0; e3 < a4.length; e3++)
      r3[e3] = a4.charCodeAt(e3);
    return r2(r3, t2.width, t2.height);
  }
  _imageDataContainsTransparent(t2) {
    for (let e3 = 3; e3 < t2.data.length; e3 += 4)
      if (255 !== t2.data[e3])
        return true;
    return false;
  }
  static from(t2) {
    return "string" == typeof t2 ? new p2({ url: t2 }) : t2 instanceof HTMLImageElement || t2 instanceof HTMLCanvasElement || t2 instanceof ImageData || t2 instanceof HTMLVideoElement ? new p2({ data: t2 }) : v(p2, t2);
  }
};
e([y({ type: String, json: { write: p } })], u.prototype, "url", null), e([y({ json: { write: { overridePolicy() {
  return { enabled: !this.url };
} } } }), y()], u.prototype, "data", null), e([r("data")], u.prototype, "writeData", null), e([o("data")], u.prototype, "readData", null), e([y({ type: Boolean, json: { write: { overridePolicy() {
  return { enabled: this._isOverridden("transparent") };
} } } })], u.prototype, "transparent", null), e([y({ json: { write: true } })], u.prototype, "wrap", void 0), e([y({ readOnly: true })], u.prototype, "contentHash", null), u = p2 = e([a("esri.geometry.support.MeshTexture")], u);
var m = u;

// node_modules/@arcgis/core/geometry/support/MeshTextureTransform.js
var p3 = class extends i(l) {
  constructor(o3) {
    super(o3), this.offset = [0, 0], this.rotation = 0, this.scale = [1, 1];
  }
};
e([y({ type: [Number], nonNullable: true, json: { write: true } })], p3.prototype, "offset", void 0), e([y({ type: Number, nonNullable: true, json: { write: true } })], p3.prototype, "rotation", void 0), e([y({ type: [Number], nonNullable: true, json: { write: true } })], p3.prototype, "scale", void 0), p3 = e([a("esri.geometry.support.MeshTextureTransform")], p3);
var c2 = p3;

// node_modules/@arcgis/core/geometry/support/MeshMaterial.js
var n2;
var u2 = n2 = class extends l {
  constructor(o3) {
    super(o3), this.color = null, this.colorTexture = null, this.colorTextureTransform = null, this.normalTexture = void 0, this.normalTextureTransform = void 0, this.alphaMode = "auto", this.alphaCutoff = 0.5, this.doubleSided = true;
  }
  clone() {
    return this.cloneWithDeduplication(null, /* @__PURE__ */ new Map());
  }
  cloneWithDeduplication(o3, r3) {
    const e3 = null != o3 ? o3.get(this) : null;
    if (e3)
      return e3;
    const t2 = new n2(this.clonePropertiesWithDeduplication(r3));
    return null != o3 && o3.set(this, t2), t2;
  }
  clonePropertiesWithDeduplication(o3) {
    var _a, _b, _c, _d;
    return { color: null != this.color ? this.color.clone() : null, colorTexture: (_a = this.colorTexture) == null ? void 0 : _a.cloneWithDeduplication(o3), normalTexture: (_b = this.normalTexture) == null ? void 0 : _b.cloneWithDeduplication(o3), alphaMode: this.alphaMode, alphaCutoff: this.alphaCutoff, doubleSided: this.doubleSided, colorTextureTransform: (_c = this.colorTextureTransform) == null ? void 0 : _c.clone(), normalTextureTransform: (_d = this.normalTextureTransform) == null ? void 0 : _d.clone() };
  }
  get memoryUsage() {
    return this.getMemoryUsage();
  }
  getMemoryUsage() {
    let o3 = 0;
    return o3 += null != this.color ? 16 : 0, null != this.colorTexture && (o3 += this.colorTexture.memoryUsage), o3 += null != this.colorTextureTransform ? 20 : 0, null != this.normalTexture && (o3 += this.normalTexture.memoryUsage), o3 += null != this.normalTextureTransform ? 20 : 0, o3;
  }
};
e([y({ type: h, json: { write: true } })], u2.prototype, "color", void 0), e([y({ type: m, json: { write: true } })], u2.prototype, "colorTexture", void 0), e([y({ type: c2, json: { write: true } })], u2.prototype, "colorTextureTransform", void 0), e([y({ type: m, json: { write: true } })], u2.prototype, "normalTexture", void 0), e([y({ type: c2, json: { write: true } })], u2.prototype, "normalTextureTransform", void 0), e([y({ nonNullable: true, json: { write: true } })], u2.prototype, "alphaMode", void 0), e([y({ nonNullable: true, json: { write: true } })], u2.prototype, "alphaCutoff", void 0), e([y({ nonNullable: true, json: { write: true } })], u2.prototype, "doubleSided", void 0), u2 = n2 = e([a("esri.geometry.support.MeshMaterial")], u2);
var a3 = u2;

// node_modules/@arcgis/core/geometry/support/MeshMaterialMetallicRoughness.js
var n3;
var u3 = n3 = class extends a3 {
  constructor(e3) {
    super(e3), this.emissiveColor = null, this.emissiveTexture = null, this.emissiveTextureTransform = void 0, this.occlusionTexture = null, this.occlusionTextureTransform = void 0, this.metallic = 1, this.roughness = 1, this.metallicRoughnessTexture = null, this.metallicRoughnessTextureTransform = void 0;
  }
  clone() {
    return this.cloneWithDeduplication(null, /* @__PURE__ */ new Map());
  }
  cloneWithDeduplication(e3, s) {
    const t2 = null != e3 ? e3.get(this) : null;
    if (t2)
      return t2;
    const o3 = new n3(this.clonePropertiesWithDeduplication(s));
    return null != e3 && e3.set(this, o3), o3;
  }
  getMemoryUsage() {
    let e3 = super.getMemoryUsage();
    return e3 += null != this.emissiveColor ? 16 : 0, null != this.emissiveTexture && (e3 += this.emissiveTexture.memoryUsage), e3 += null != this.emissiveTextureTransform ? 20 : 0, null != this.occlusionTexture && (e3 += this.occlusionTexture.memoryUsage), e3 += null != this.occlusionTextureTransform ? 20 : 0, null != this.metallicRoughnessTexture && (e3 += this.metallicRoughnessTexture.memoryUsage), e3 += null != this.metallicRoughnessTextureTransform ? 20 : 0, e3;
  }
  clonePropertiesWithDeduplication(e3) {
    var _a, _b, _c, _d, _e, _f, _g;
    return { ...super.clonePropertiesWithDeduplication(e3), emissiveColor: (_a = this.emissiveColor) == null ? void 0 : _a.clone(), emissiveTexture: (_b = this.emissiveTexture) == null ? void 0 : _b.cloneWithDeduplication(e3), emissiveTextureTransform: (_c = this.emissiveTextureTransform) == null ? void 0 : _c.clone(), occlusionTexture: (_d = this.occlusionTexture) == null ? void 0 : _d.cloneWithDeduplication(e3), occlusionTextureTransform: (_e = this.occlusionTextureTransform) == null ? void 0 : _e.clone(), metallic: this.metallic, roughness: this.roughness, metallicRoughnessTexture: (_f = this.metallicRoughnessTexture) == null ? void 0 : _f.cloneWithDeduplication(e3), metallicRoughnessTextureTransform: (_g = this.metallicRoughnessTextureTransform) == null ? void 0 : _g.clone() };
  }
};
e([y({ type: h, json: { write: true } })], u3.prototype, "emissiveColor", void 0), e([y({ type: m, json: { write: true } })], u3.prototype, "emissiveTexture", void 0), e([y({ type: c2, json: { write: true } })], u3.prototype, "emissiveTextureTransform", void 0), e([y({ type: m, json: { write: true } })], u3.prototype, "occlusionTexture", void 0), e([y({ type: c2, json: { write: true } })], u3.prototype, "occlusionTextureTransform", void 0), e([y({ type: Number, nonNullable: true, json: { write: true }, range: { min: 0, max: 1 } })], u3.prototype, "metallic", void 0), e([y({ type: Number, nonNullable: true, json: { write: true }, range: { min: 0, max: 1 } })], u3.prototype, "roughness", void 0), e([y({ type: m, json: { write: true } })], u3.prototype, "metallicRoughnessTexture", void 0), e([y({ type: c2, json: { write: true } })], u3.prototype, "metallicRoughnessTextureTransform", void 0), u3 = n3 = e([a("esri.geometry.support.MeshMaterialMetallicRoughness")], u3);
var c3 = u3;

export {
  e2 as e,
  m,
  c2 as c,
  a3 as a,
  c3 as c2
};
//# sourceMappingURL=chunk-LWDDTPWX.js.map
