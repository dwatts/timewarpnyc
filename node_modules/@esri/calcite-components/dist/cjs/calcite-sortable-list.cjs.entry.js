/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.5.0
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9f8ce657.js');
const interactive = require('./interactive-793314f0.js');
const observers = require('./observers-e29e2712.js');
const sortableComponent = require('./sortableComponent-b6c07723.js');
const dom = require('./dom-b7601405.js');
require('./guid-1a635f47.js');
require('./resources-53a07e71.js');

const CSS = {
  sortItem: "sort-item",
  container: "container",
  containerHorizontal: "container--horizontal",
  containerVertical: "container--vertical",
};

const sortableListCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:flex}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.container{display:flex;flex:1 1 auto}.container--vertical{flex-direction:column}.container--horizontal{flex-direction:row}:host([hidden]){display:none}[hidden]{display:none}";

const SortableList = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.calciteListOrderChange = index.createEvent(this, "calciteListOrderChange", 6);
    this.items = [];
    this.mutationObserver = observers.createObserver("mutation", () => {
      this.setUpSorting();
    });
    this.dragEnabled = true;
    this.canPull = undefined;
    this.canPut = undefined;
    this.dragSelector = undefined;
    this.group = undefined;
    this.handleSelector = "calcite-handle";
    this.layout = "vertical";
    this.disabled = false;
    this.loading = false;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  connectedCallback() {
    this.setUpSorting();
    this.beginObserving();
    interactive.connectInteractive(this);
  }
  disconnectedCallback() {
    interactive.disconnectInteractive(this);
    sortableComponent.disconnectSortableComponent(this);
    this.endObserving();
  }
  componentDidRender() {
    interactive.updateHostInteraction(this);
  }
  calciteHandleNudgeNextHandler(event) {
    this.handleNudgeEvent(event);
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  onDragStart() {
    this.endObserving();
  }
  onDragEnd() {
    this.beginObserving();
  }
  onDragSort() {
    this.items = Array.from(this.el.children);
    this.calciteListOrderChange.emit();
  }
  handleNudgeEvent(event) {
    const { direction } = event.detail;
    const handle = event
      .composedPath()
      .find((el) => el.matches(this.handleSelector));
    const sortItem = this.items.find((item) => {
      return item.contains(handle) || event.composedPath().includes(item);
    });
    const lastIndex = this.items.length - 1;
    const startingIndex = this.items.indexOf(sortItem);
    let appendInstead = false;
    let buddyIndex;
    if (direction === "up") {
      if (startingIndex === 0) {
        appendInstead = true;
      }
      else {
        buddyIndex = startingIndex - 1;
      }
    }
    else {
      if (startingIndex === lastIndex) {
        buddyIndex = 0;
      }
      else if (startingIndex === lastIndex - 1) {
        appendInstead = true;
      }
      else {
        buddyIndex = startingIndex + 2;
      }
    }
    this.endObserving();
    if (appendInstead) {
      sortItem.parentElement.appendChild(sortItem);
    }
    else {
      sortItem.parentElement.insertBefore(sortItem, this.items[buddyIndex]);
    }
    this.items = Array.from(this.el.children);
    this.beginObserving();
    requestAnimationFrame(() => dom.focusElement(handle));
    if ("activated" in handle) {
      handle.activated = true;
    }
  }
  setUpSorting() {
    this.items = Array.from(this.el.children);
    sortableComponent.connectSortableComponent(this);
  }
  beginObserving() {
    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
  }
  endObserving() {
    this.mutationObserver?.disconnect();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  render() {
    const { layout } = this;
    const horizontal = layout === "horizontal" || false;
    return (index.h("div", { class: {
        [CSS.container]: true,
        [CSS.containerVertical]: !horizontal,
        [CSS.containerHorizontal]: horizontal,
      } }, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
};
SortableList.style = sortableListCss;

exports.calcite_sortable_list = SortableList;
