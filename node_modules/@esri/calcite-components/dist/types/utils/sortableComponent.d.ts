import Sortable from "sortablejs";
export interface DragEvent {
  toEl: HTMLElement;
  fromEl: HTMLElement;
  dragEl: HTMLElement;
}
/**
 * Defines interface for components with sorting functionality.
 */
export interface SortableComponent {
  /**
   * The host element.
   */
  readonly el: HTMLElement;
  /**
   * When `true`, dragging is enabled.
   */
  dragEnabled: boolean;
  /**
   * Specifies which items inside the element should be draggable.
   */
  dragSelector?: string;
  /**
   * The list's group identifier.
   */
  group?: string;
  /**
   * The selector for the handle elements.
   */
  handleSelector: string;
  /**
   * The Sortable instance.
   */
  sortable: Sortable;
  /**
   * Whether the element can move from the list.
   */
  canPull: (event: DragEvent) => boolean;
  /**
   * Whether the element can be added from another list.
   */
  canPut: (event: DragEvent) => boolean;
  /**
   * Called by any change to the list (add / update / remove).
   */
  onDragSort: (event: Sortable.SortableEvent) => void;
  /**
   * Element dragging started.
   */
  onDragStart?: (event: Sortable.SortableEvent) => void;
  /**
   * Element dragging ended.
   */
  onDragEnd?: (event: Sortable.SortableEvent) => void;
}
/**
 * Helper to keep track of a SortableComponent. This should be called in the `connectedCallback` lifecycle method as well as any other method necessary to rebuild the sortable instance.
 *
 * @param {SortableComponent} component - The sortable component.
 */
export declare function connectSortableComponent(component: SortableComponent): void;
/**
 * Helper to remove track of a SortableComponent. This should be called in the `disconnectedCallback` lifecycle method.
 *
 * @param {SortableComponent} component - The sortable component.
 */
export declare function disconnectSortableComponent(component: SortableComponent): void;
