import{b0 as n,aw as p,aN as m,ay as i,az as e,b1 as l,aB as d}from"./index-2c565904.js";import{x as h}from"./I3SMeshView3D-1a941f86.js";import{n as c}from"./LayerView3D-69f75979.js";import{d as u}from"./LayerView-d172275e.js";import"./I3SOverrides-a3cb7013.js";import"./I3SNode-d075ade4.js";import"./meshFeatureSet-31e700c3.js";import"./MeshGeoreferencedRelativeVertexSpace-f7d84ab8.js";import"./MeshLocalVertexSpace-febafbb8.js";import"./georeference-50c5f3ae.js";import"./External-79480cce.js";import"./FeatureLayerView3D-1c0dce8d.js";import"./FeatureLayerViewBase3D-5d513c7d.js";import"./FeatureLikeLayerView3D-78d9efde.js";import"./dehydratedFeatureComparison-6c03e874.js";import"./queryForSymbologySnapping-9094f92f.js";import"./elevationInfoUtils-8e2fc3cb.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-78fe626d.js";import"./optimizedFeatureQueryEngineAdapter-1a25df40.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-36b642c7.js";import"./quickselect-7a8d44a3.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-da71cdca.js";import"./normalizeUtils-5b5b1ce1.js";import"./normalizeUtilsCommon-8b4d80f4.js";import"./WhereClause-dfedc29e.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-001b0a81.js";import"./generateRendererUtils-7029d08e.js";import"./FeatureStore-537f3c54.js";import"./BoundsStore-a17a4409.js";import"./projectExtentUtils-3ae3322a.js";import"./query-3dbe5123.js";import"./pbfQueryUtils-6bd44f27.js";import"./pbf-085be3b9.js";import"./EventedSet-4aa1adbb.js";import"./RefreshableLayerView-5906d57b.js";import"./SceneModification-0366541a.js";import"./SceneLayerWorker-83cd37a2.js";const g=.2;let r=class extends h(c(u)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const at=r;export{at as default};
