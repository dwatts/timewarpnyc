import{b0 as n,aw as p,aN as m,ay as i,az as e,b1 as l,aB as d}from"./index-acaff663.js";import{x as h}from"./I3SMeshView3D-459c3514.js";import{n as c}from"./LayerView3D-2b8d3cad.js";import{d as u}from"./LayerView-04318827.js";import"./I3SOverrides-af82ecd5.js";import"./I3SNode-35145a96.js";import"./meshFeatureSet-1418168b.js";import"./MeshGeoreferencedRelativeVertexSpace-44a59798.js";import"./MeshLocalVertexSpace-f4b1eebf.js";import"./georeference-0cbc476c.js";import"./External-ea5d25fa.js";import"./FeatureLayerView3D-635c5cf0.js";import"./FeatureLayerViewBase3D-ce3f3269.js";import"./FeatureLikeLayerView3D-41fcb0bd.js";import"./dehydratedFeatureComparison-e1cc708a.js";import"./queryForSymbologySnapping-0292b91c.js";import"./elevationInfoUtils-f5fd888e.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-38fbbdb7.js";import"./optimizedFeatureQueryEngineAdapter-61e091ea.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-5e54826e.js";import"./quickselect-c8ddaea5.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-71bdeb21.js";import"./normalizeUtils-e801dbba.js";import"./normalizeUtilsCommon-7ae13e75.js";import"./WhereClause-fee85173.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-3bb460f8.js";import"./generateRendererUtils-2e15b37b.js";import"./FeatureStore-b0f68fbe.js";import"./BoundsStore-99b8525b.js";import"./projectExtentUtils-045b5b6c.js";import"./query-0e7235b4.js";import"./pbfQueryUtils-c067e7e0.js";import"./pbf-86adb056.js";import"./EventedSet-e6675b4b.js";import"./RefreshableLayerView-da8d24f4.js";import"./SceneModification-35eedd9d.js";import"./SceneLayerWorker-656aac85.js";const g=.2;let r=class extends h(c(u)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const at=r;export{at as default};
