import{b0 as n,aw as p,aN as m,ay as i,az as e,b1 as l,aB as d}from"./index-6118a8e3.js";import{x as h}from"./I3SMeshView3D-af3eab0e.js";import{n as c}from"./LayerView3D-b7ca10da.js";import{d as u}from"./LayerView-a98a58b6.js";import"./I3SOverrides-e1c92bcb.js";import"./I3SNode-a179f7b5.js";import"./meshFeatureSet-3d090ec5.js";import"./MeshGeoreferencedRelativeVertexSpace-8889040e.js";import"./MeshLocalVertexSpace-f3b5c9bc.js";import"./georeference-9efc58fd.js";import"./External-546f2fa7.js";import"./FeatureLayerView3D-24441a31.js";import"./FeatureLayerViewBase3D-eba15d00.js";import"./FeatureLikeLayerView3D-195402b9.js";import"./dehydratedFeatureComparison-f9d1dca1.js";import"./queryForSymbologySnapping-f0d2a6ad.js";import"./elevationInfoUtils-47cc07cc.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-5ab505c6.js";import"./optimizedFeatureQueryEngineAdapter-567ff9c7.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-ec014816.js";import"./quickselect-03d04a63.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-d0a04d9d.js";import"./normalizeUtils-7df4c9fc.js";import"./normalizeUtilsCommon-0748fc46.js";import"./WhereClause-c31c6ae2.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-c4397638.js";import"./generateRendererUtils-4e372a31.js";import"./FeatureStore-f578b26b.js";import"./BoundsStore-312d2bd3.js";import"./projectExtentUtils-3d0efb92.js";import"./query-7506d2f3.js";import"./pbfQueryUtils-354cc546.js";import"./pbf-fb9b6537.js";import"./EventedSet-83f37913.js";import"./RefreshableLayerView-a95ef6b9.js";import"./SceneModification-06a1a9cc.js";import"./SceneLayerWorker-9ebb97a6.js";const g=.2;let r=class extends h(c(u)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const at=r;export{at as default};
