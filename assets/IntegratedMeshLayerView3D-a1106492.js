import{b0 as n,aw as p,aN as m,ay as i,az as e,b1 as l,aB as d}from"./index-b2b09e10.js";import{x as h}from"./I3SMeshView3D-a2bee5d3.js";import{n as c}from"./LayerView3D-e6035d71.js";import{d as u}from"./LayerView-9b804ac5.js";import"./I3SOverrides-ac61f14c.js";import"./I3SNode-19e584e1.js";import"./meshFeatureSet-5d86ae14.js";import"./MeshGeoreferencedRelativeVertexSpace-f17e45f2.js";import"./MeshLocalVertexSpace-4d7e45a2.js";import"./georeference-3b31f23c.js";import"./External-f8dbb20e.js";import"./FeatureLayerView3D-e731a52f.js";import"./FeatureLayerViewBase3D-f15659d2.js";import"./FeatureLikeLayerView3D-5aea022b.js";import"./dehydratedFeatureComparison-25372d68.js";import"./queryForSymbologySnapping-bae9ecad.js";import"./elevationInfoUtils-65e4a8a8.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-3c9d0554.js";import"./optimizedFeatureQueryEngineAdapter-47e89a01.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-dbf2d265.js";import"./quickselect-3f3a3f5c.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-8cce526a.js";import"./normalizeUtils-8c6098d1.js";import"./normalizeUtilsCommon-d7459985.js";import"./WhereClause-d619dbe3.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-91ea2562.js";import"./generateRendererUtils-b93db46c.js";import"./FeatureStore-41600172.js";import"./BoundsStore-86554cb1.js";import"./projectExtentUtils-5e9564e1.js";import"./query-8241ba87.js";import"./pbfQueryUtils-b0098b42.js";import"./pbf-bfecb5f6.js";import"./EventedSet-df58accc.js";import"./RefreshableLayerView-eabb9465.js";import"./SceneModification-313b2b6e.js";import"./SceneLayerWorker-35dad489.js";const g=.2;let r=class extends h(c(u)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const at=r;export{at as default};
