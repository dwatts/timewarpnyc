import{b0 as n,aw as p,aN as m,ay as i,az as e,b1 as l,aB as d}from"./index-50ec4ba6.js";import{x as h}from"./I3SMeshView3D-a7c5b1d0.js";import{n as c}from"./LayerView3D-c8abac2e.js";import{d as u}from"./LayerView-94db3d0d.js";import"./I3SOverrides-e575abb6.js";import"./I3SNode-3db8a731.js";import"./meshFeatureSet-c95779d8.js";import"./MeshGeoreferencedRelativeVertexSpace-3da41863.js";import"./MeshLocalVertexSpace-9405ee89.js";import"./georeference-dc6fcfef.js";import"./External-2c026172.js";import"./FeatureLayerView3D-d70fd500.js";import"./FeatureLayerViewBase3D-f58c046d.js";import"./FeatureLikeLayerView3D-aa9912b1.js";import"./dehydratedFeatureComparison-d210119e.js";import"./queryForSymbologySnapping-b297693a.js";import"./elevationInfoUtils-3b5193fb.js";import"./hash-6f442295.js";import"./Graphics3DObjectStates-d1290f53.js";import"./optimizedFeatureQueryEngineAdapter-3d48a5d6.js";import"./centroid-8e8cfa47.js";import"./PooledRBush-2be19189.js";import"./quickselect-bdac7f40.js";import"./floorFilterUtils-080a7cd2.js";import"./QueryEngine-e008635d.js";import"./normalizeUtils-0bb66644.js";import"./normalizeUtilsCommon-8ae207e8.js";import"./WhereClause-b2ffbae0.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-928acc7a.js";import"./generateRendererUtils-43c588e1.js";import"./FeatureStore-4c7ff746.js";import"./BoundsStore-8ea47468.js";import"./projectExtentUtils-4dbbd049.js";import"./query-5acb5eb9.js";import"./pbfQueryUtils-205746d5.js";import"./pbf-49c18352.js";import"./EventedSet-37300b80.js";import"./RefreshableLayerView-c09f75be.js";import"./SceneModification-ca2bef24.js";import"./SceneLayerWorker-f981e226.js";const g=.2;let r=class extends h(c(u)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(l)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const at=r;export{at as default};
